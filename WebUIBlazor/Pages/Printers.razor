@page "/printers"
@inject Data.PrinterDataServiceTest printer
@inject Data.BackgroundTimer background

<ConnectionStatus SelectedPrinter="@printer.SelectedPrinter.Name" Connection="printer.serialConnection.IsConnected" />

<MudCard>
    <MudExpansionPanels MultiExpansion="true">
        @foreach (var p in printer.Printers)
        {
            <MudExpansionPanel @ref="PanelRefs[p]" Text="@p.Name" Icon="@(printer.SelectedPrinter == p ? @Icons.Material.Filled.Verified : null)">
                <MudList>
                    <MudListItem>
                        <MudText Typo="Typo.overline"><b>ID:</b> @p.Id</MudText>
                    </MudListItem>
                    <MudListItem>
                        <MudText Typo="Typo.overline"><b>Model:</b> @p.Model</MudText>
                    </MudListItem>
                    <MudListItem>
                        <MudText Typo="Typo.overline"><b>PrinterFirmwareVersion:</b> @p.PrinterFirmwareVersion</MudText>
                    </MudListItem>
                    <MudListItem>
                        <MudText Typo="Typo.overline"><b>HasAutoBedLevel</b>: @p.HasAutoBedLevel</MudText>
                    </MudListItem>
                    <MudListItem>
                        <MudText Typo="Typo.overline"><b>HasChamber:</b> @p.HasChamber</MudText>
                    </MudListItem>
                    <MudListItem>
                        <MudText Typo="Typo.overline"><b>HasFilamentRunoutSensor:</b> @p.HasFilamentRunoutSensor</MudText>
                    </MudListItem>
                    <MudListItem>
                        <MudText Typo="Typo.overline"><b>HasHeatedBed:</b> @p.HasHeatedBed</MudText>
                    </MudListItem>
                    <MudListItem>
                        <MudText Typo="Typo.overline"><b>NumberOfExtruders:</b> @p.NumberOfExtruders</MudText>
                    </MudListItem>
                    @foreach (var extruder in p.Extruders)
                    {
                        <MudExpansionPanel Text=@($"Extruder #{p.Extruders.IndexOf(extruder) + 1}")>
                            <MudList>
                                <MudListItem>
                                    <MudText Typo="Typo.overline"><b>Nozzle Material:</b> @extruder.NozzleMaterial</MudText>
                                </MudListItem>
                                <MudListItem>
                                    <MudText Typo="Typo.overline"><b>Nozzle Diameter:</b> @extruder.NozzleDiameter</MudText>
                                </MudListItem>
                                <MudListItem>
                                    <MudText Typo="Typo.overline"><b>Has Cooling Fan:</b> @extruder.HasCoolingFan</MudText>
                                </MudListItem>
                                <MudListItem>
                                    <MudText Typo="Typo.overline"><b>Probe Present:</b> @extruder.ProbePresent</MudText>
                                </MudListItem>
                            </MudList>
                        </MudExpansionPanel>
                    }

                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ChooseAndCollapse(p)">Select</MudButton>
                    @* <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => printer.RemovePrinter(p)">Delete Profile</MudButton> *@

                </MudList>
            </MudExpansionPanel>
        }
    </MudExpansionPanels>
</MudCard>

@code {
    Dictionary<MachineControlHub.Printer, MudExpansionPanel> PanelRefs = new Dictionary<MachineControlHub.Printer, MudExpansionPanel>();

    protected override void OnInitialized()
    {
        printer.Printers = printer.LoadPrinterDataList<MachineControlHub.Printer>(Data.PrinterDataServiceTest.PRINTER_DATA_PATH);
        printer.SelectedPrinter = printer.LoadPrinterData<MachineControlHub.Printer>(Data.PrinterDataServiceTest.SELECTED_PRINTER_SETTINGS_PATH);
        if (printer.Printers.Any())
        {
            string targetID = printer.SelectedPrinter.Id;
            printer.SelectedPrinter = printer.Printers.Where(p => p.Id == targetID).FirstOrDefault();
        }
    }


    private void ChooseAndCollapse(MachineControlHub.Printer p)
    {
        // printer.ChoosePrinter(p);
        PanelRefs[p].Collapse(false);
    }
}
