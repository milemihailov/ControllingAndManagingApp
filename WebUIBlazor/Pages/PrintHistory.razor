@page "/printhistory"
@using MachineControlHub.Motion
@using MachineControlHub.Print

@inject PrintingService printingService
@inject PrinterDataServiceTest printerDataServiceTest
@inject PortConnectionManagerService PortManager
@inject NavigationManager MyNavigationManager

<MudGrid Class="mt-9" Style="width: 100vw;">
    <MudItem xl="6">
        <div style="text-align:center;">
            <!-- Add this div with text-align style -->
            <MudText Typo="Typo.h4" Color="Color.Primary" Align="Align.Center" Class="pb-10">Print History</MudText>
        </div>

        @foreach (var printJob in printerDataServiceTest.printHistory.Where(printJob => printJob.PrinterName == PortManager.SelectedPrinter))
        {
            <div style="display:flex; justify-content:center; align-items: center;">
                <div style="width:60%;">
                    <ContainerSpaceBetween>
                        <MudText>Printer name:</MudText>
                        <MudText>@printJob.PrinterName</MudText>
                    </ContainerSpaceBetween>
                    <ContainerSpaceBetween>
                        <MudText>File name:</MudText>
                        <MudText>@printJob.FileName</MudText>
                    </ContainerSpaceBetween>
                    <ContainerSpaceBetween>
                        <MudText>Total print time:</MudText>
                        <MudText>@printJob.TotalPrintTime</MudText>
                    </ContainerSpaceBetween>
                    <ContainerSpaceBetween>
                        <MudText>Start time of print:</MudText>
                        <MudText>@printJob.StartTimeOfPrint</MudText>
                    </ContainerSpaceBetween>
                    <ContainerSpaceBetween>
                        <MudText>File size:</MudText>
                        <MudText>@Math.Round(printJob.ConvertToMB(printJob.FileSize), 2)MB</MudText>
                    </ContainerSpaceBetween>

                    <MudButton FullWidth="true" Color="Color.Error" OnClick="() => printerDataServiceTest.RemovePrintJob(printJob)">Delete Record</MudButton>
                    <MudDivider />@*
                <ContainerSpaceBetween>
                <MudText>End time of print: @printJob.EndTimeOfPrint</MudText>
                </ContainerSpaceBetween>  *@
                </div>
            </div>
        }
    </MudItem>
    <MudItem xl="6">
        <div style="text-align:center;">
            <!-- Add this div with text-align style -->
            <MudText Typo="Typo.h4" Color="Color.Primary" Align="Align.Center" Class="pb-10">Print Alltime Stats</MudText>
        </div>
        <div style="display:flex; justify-content:center; align-items: center;">
            <div style="width:60%;">
                <ContainerSpaceBetween>
                    <MudText>Number of prints:</MudText>
                    <MudText>@printerDataServiceTest.Printer.PrintHistory.TotalPrints</MudText>
                </ContainerSpaceBetween>
                <ContainerSpaceBetween>
                    <MudText>Finished prints:</MudText>
                    <MudText>@printerDataServiceTest.Printer.PrintHistory.TotalFinishedPrints</MudText>
                </ContainerSpaceBetween>
                <ContainerSpaceBetween>
                    <MudText>Failed prints:</MudText>
                    <MudText>@printerDataServiceTest.Printer.PrintHistory.TotalFailedPrints</MudText>
                </ContainerSpaceBetween>
                <ContainerSpaceBetween>
                    <MudText>Total print time:</MudText>
                    <MudText>@printerDataServiceTest.Printer.PrintHistory.TotalPrintTime</MudText>
                </ContainerSpaceBetween>
                <ContainerSpaceBetween>
                    <MudText>Longest print job:</MudText>
                    <MudText>@printerDataServiceTest.Printer.PrintHistory.LongestPrintJob</MudText>
                </ContainerSpaceBetween>
                <ContainerSpaceBetween>
                    <MudText>Filament used:</MudText>
                    <MudText>@printerDataServiceTest.Printer.PrintHistory.FilamentUsed</MudText>
                </ContainerSpaceBetween>
            </div>
        </div>
    </MudItem>
</MudGrid>


@code {
    protected override void OnInitialized()
    {
        printerDataServiceTest.printHistory = printerDataServiceTest.LoadPrinterDataList<MachineControlHub.Print.CurrentPrintJob>(PrinterDataServiceTest.PRINT_HISTORY_PATH);
        PortManager.SelectedPrinterChanged += OnSelectedPrinter;

        // Check if the serial connection is established and request Print Job Stats if connected
        if (PortManager.connections != null && PortManager.connections.Count > 0)
        {
            PortManager.connections[PortManager.SelectedPrinter].ConnectionServiceSerial.Write("M78");

            // Subscribe to the InputReceived event of the selected printer
            foreach (var port in PortManager.connections.Values)
            {
                port.InputReceived += OnUpdate;
            }
        }
    }

    private void OnUpdate(string message,SerialDataProcessorService source)
    {
        if (PortManager.SelectedPrinter == source.ConnectionServiceSerial.portName)
        {
            printerDataServiceTest.GetPrintJobStats(message);
            InvokeAsync(StateHasChanged);
        }
    }

    /// <summary>
    /// Refreshes the component state when toggling between printers.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    private async void OnSelectedPrinter(object sender, EventArgs e)
    {
        try
        {
            await InvokeAsync(() => MyNavigationManager.NavigateTo(MyNavigationManager.Uri, true));
        }
        catch (NavigationException navEx)
        {
            Console.WriteLine($"Navigation error: {navEx.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected error: {ex.Message}");
        }
    }
}
