@page "/bedlevel"
@using Plotly.Blazor.LayoutLib
@inject Data.BedLevelingService levelBed
@using System.Globalization
@using Plotly.Blazor.Interop
@inject NavigationManager MyNavigationManager

@if (!IsInitialized)
{
    <MudPaper>
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
    </MudPaper>
}
<PlotlyChart style="height: 60vh; min-height: 350px" @bind-Config="config" @bind-Layout="layout" @bind-Data="data" @ref="chart" 
             ClickAction="ClickAction" HoverAction="HoverAction"  />

<button @onclick="Calibrate">Calibrate</button>
@code
{
    [CascadingParameter]
    private MudTheme Theme { get; set; }

    private PlotlyChart chart;
    private Config config;
    private Layout layout;
    private IList<ITrace> data;

    private IEnumerable<EventDataPoint> ClickInfos { get; set; }
    private IEnumerable<EventDataPoint> HoverInfos { get; set; }

    private bool IsInitialized { get; set; }


    private async Task Calibrate()
    {
        await Task.Run(() => levelBed.CalibrateBed());
        LoadData();
    }

    protected override void OnInitialized()
    {
        config = new Config
            {
                ShowLink = false,
                Responsive = true,
                DisplayLogo = true
            };

        layout = new Layout
            {
                Title = new Title
                {
                    Text = "Bed Mesh"
                },
                PaperBgColor = "white",
                PlotBgColor = "white",
                Font = new Font
                {
                    Color = "black"
                },
                Margin = new Plotly.Blazor.LayoutLib.Margin
                {
                    L = 65,
                    R = 50,
                    B = 65,
                    T = 90
                }
            };

        data = new List<ITrace>();

        base.OnInitialized();
    }

    private void LoadData()
    {
        Task.Run(async () =>
        {
            foreach (var trace in await GetSurfaceData())
            {
                await InvokeAsync(async () => await chart.AddTrace(trace));
                await Task.Delay(100);
            }
            IsInitialized = true;
            await chart.SubscribeHoverEvent();
            await chart.SubscribeClickEvent();
            await InvokeAsync(StateHasChanged);
        });
    }

    public void ClickAction(IEnumerable<EventDataPoint> eventData)
    {
        ClickInfos = eventData;
        StateHasChanged();
    }

    public void HoverAction(IEnumerable<EventDataPoint> eventData)
    {
        HoverInfos = eventData;
        StateHasChanged();
    }

    async Task<IList<ITrace>> GetSurfaceData()
    {
        IList<ITrace> mapData = new List<ITrace>();

        using var client = new HttpClient
            {
                BaseAddress = new Uri(MyNavigationManager.BaseUri)
            };

        var csv = await Task.Run(() => levelBed.CSVData
            .Split("\n")
            .Skip(1)
            .Where(s => !string.IsNullOrWhiteSpace(s))
            .Select(s => s.Split(",").ToList()).ToList());

        var z = new List<decimal[]>();

        foreach (var row in csv)
        {
            var currentValues = new List<decimal>();

            for (var i = 1; i < row.Count; i++)
            {
                currentValues.Add(decimal.Parse(row[i], NumberStyles.Any, CultureInfo.InvariantCulture));
            }

            z.Add(currentValues.ToArray());
        }

        mapData.Add(new Surface
            {
                Z = z.Cast<object>().ToList()
            });

        return mapData;
    }
}