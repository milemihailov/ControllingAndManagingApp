@inject Data.PrinterDataService printerData
@inject Data.BackgroundTimer background
@inject Data.PrinterManagerService printerManager

<MudText Class="pr-9" Typo="Typo.h6" Color="Color.Tertiary">@printerManager.ActivePrinter.Name</MudText>


<MudMenu Class="pr-12" Icon="@Icons.Material.Filled.AdUnits">
    <ChildContent>
        @foreach (var bs in printerManager.Printers.Values)
        {
            <MudMenuItem OnClick="() => OnPrinterSelected(bs.SerialConnection.PortName)" Disabled="@(!bs.SerialConnection.IsConnected ? true : false)">
                <MudAlert ContentAlignment="HorizontalAlignment.Center" Icon="@Icons.Material.Filled.PrivateConnectivity" Severity="@(bs.SerialConnection.IsConnected ? Severity.Success : Severity.Error )" Variant="Variant.Text">
                    @(new MarkupString(bs.SerialConnection.IsConnected ? $"<strong>{bs.Name}</strong> - Connected" : $"<strong>{bs.Name}</strong> - Disconnected"))
                </MudAlert>
            </MudMenuItem>
        }
    </ChildContent>
</MudMenu>

@code {

    [Parameter]
    public bool Connection { get; set; }

    protected override void OnInitialized()
    {
        background.SecondElapsed += OnSecondElapsed;
    }

    private void OnSecondElapsed()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void OnPrinterSelected(string portName)
    {
        printerManager.SelectPrinter(portName);
    }

    public void Dispose()
    {
        background.SecondElapsed -= OnSecondElapsed;
    }
}