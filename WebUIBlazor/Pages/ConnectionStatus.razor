@inject Data.PrinterDataService PrinterData
@inject Data.BackgroundTimer Background
@inject Data.PrinterManagerService PrinterManager

<MudText Class="pr-9" Typo="Typo.h6" Color="@(PrinterManager.ActivePrinter.SerialConnection.IsConnected ? Color.Tertiary : Color.Error)">@PrinterManager.ActivePrinter.Name</MudText>

<MudTooltip Text="Select printer">
    <MudMenu Class="pr-12" Icon="@Icons.Material.Filled.Cable">
        <ChildContent>
            @foreach (var bs in PrinterManager.Printers.Values)
            {
                <MudMenuItem OnClick="() => OnPrinterSelected(bs.SerialConnection.PortName)" Disabled="@(!bs.SerialConnection.IsConnected ? true : false)">
                    <MudAlert ContentAlignment="HorizontalAlignment.Center" Icon="@Icons.Material.Filled.PrivateConnectivity" Severity="@(bs.SerialConnection.IsConnected ? Severity.Success : Severity.Error )" Variant="Variant.Text">
                        @(new MarkupString(bs.SerialConnection.IsConnected ? $"<strong>{bs.Name}</strong> - Connected" : $"<strong>{bs.Name}</strong> - Disconnected"))
                    </MudAlert>
                </MudMenuItem>
            }
        </ChildContent>
    </MudMenu>
</MudTooltip>

@code {

    protected override void OnInitialized()
    {
        Background.SecondElapsed += OnSecondElapsed;
    }

    private void OnSecondElapsed()
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnPrinterSelected(string portName)
    {
        PrinterManager.SelectPrinter(portName);
    }

    public void Dispose()
    {
        Background.SecondElapsed -= OnSecondElapsed;
    }
}