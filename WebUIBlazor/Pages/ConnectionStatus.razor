@inject Data.PortConnectionManagerService PortManager
@inject Data.SerialDataProcessorService serialDataProcessor
@inject Data.PrinterDataServiceTest printerData
@inject Data.BackgroundTimer background

<MudText Class="pr-9" Typo="Typo.h6" Color="@(PortManager.SelectedPrinter == PortManager.connection.ConnectionServiceSerial.portName && PortManager.connection.ConnectionServiceSerial.IsConnected ? Color.Tertiary : Color.Error)">@PortManager.SelectedPrinter</MudText>


<MudMenu Class="pr-12" Icon="@Icons.Material.Filled.AdUnits">
    <ChildContent>
        @foreach (var bs in PortManager.connections.Values)
        {
            <MudMenuItem OnClick="() => OnPrinterSelected(bs.ConnectionServiceSerial.portName)" Disabled="@(!bs.ConnectionServiceSerial.IsConnected ? true : false)">
                <MudAlert ContentAlignment="HorizontalAlignment.Center" Icon="@Icons.Material.Filled.PrivateConnectivity" Severity="@(bs.ConnectionServiceSerial.IsConnected ? Severity.Success : Severity.Error )" Variant="Variant.Text">
                    @(new MarkupString(bs.ConnectionServiceSerial.IsConnected ? $"<strong>{bs.ConnectionServiceSerial.portName}</strong> - Connected" : $"<strong>{bs.ConnectionServiceSerial.portName}</strong> - Disconnected"))
                </MudAlert>
            </MudMenuItem>
        }
    </ChildContent>
</MudMenu>

@code {

    [Parameter]
    public bool Connection { get; set; }

    protected override void OnInitialized()
    {
        background.SecondElapsed += OnSecondElapsed;
    }

    private void UpdateConnectionStatus(string message, SerialDataProcessorService source)
    {
        // InvokeAsync(() =>
        // {
        //     // Connection = background.ConnectionServiceSerial.IsConnected;
        //     Console.WriteLine($"Hi from {source.ConnectionServiceSerial.portName}");
        //     StateHasChanged();
        // });
        if (PortManager.SelectedPrinter == source.ConnectionServiceSerial.portName)
        {
            // printingService.UpdatePrintProgress(message);
        }

        InvokeAsync(StateHasChanged);
    }

    private void OnSecondElapsed()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void OnPrinterSelected(string portName)
    {
        PortManager.SelectedPrinter = portName;
        PortManager.SelectPrinter(PortManager.SelectedPrinter);
    }

    public void Dispose()
    {
        background.SecondElapsed -= OnSecondElapsed;
    }
}