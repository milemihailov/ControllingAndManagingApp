@page "/temperature"
@using MachineControlHub.Temps
@using MachineControlHub.Motion
@inject Data.ConnectionServiceSerial serial
@inject Data.PrinterData printerData
@inject Data.HotendTemperatureService hotend
@inject Data.BedTemperatureService bed
@implements IDisposable

<h5 style="color: @(serial.isConnected == "Connected" ? "green" : "red")">@serial.isConnected</h5>
<br />
<br />

<h3>Temperature</h3>

<div>
    <p>Current Hotend Temperature</p>
    <p>@hotend.hotend.HotendCurrentTemp</p>
    <p>Target Hotend Temperature</p>
    <p>@hotend.hotend.TargetHotendTemp</p>
    <br />
    <p>Current Bed Temperature</p>
    <p>@bed.bed.CurrentBedTemp</p>
    <p>Target Bed Temperature</p>
    <p>@bed.bed.TargetBedTemp</p>

    <input type="number" @bind="@hotend.hotend.SetHotendTemp" />
    <button class="btn-outline-primary" @onclick="() => hotend.SetHotendTemperature(hotend.hotend.SetHotendTemp)">Set Hotend Temperature</button>
    <button class="btn-danger" @onclick="() => hotend.SetHotendTemperature(0)">Turn Hotend Off</button>
    <input type="number" @bind="@bed.bed.SetBedTemp" />
    <button class="btn-outline-primary" @onclick="() => bed.SetBedTemperature(bed.bed.SetBedTemp)">Set Bed Temperature</button>
    <button class="btn-danger" @onclick="() => bed.SetBedTemperature(0)">Turn Bed Off</button>
    <br />
    <br />
    <button class="btn-outline-primary" @onclick="() => serial.Write(CommandMethods.BuildFilamentChangeCommand()) ">Change Filament</button>


</div>

@code {

    private Timer timer;
    protected override void OnInitialized()
    {
        timer = new Timer(UpdateTemperatureValues, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    private async void UpdateTemperatureValues(object state)
    {
        if (serial.initialized)
        {
            // Update the temperature values here asynchronously if needed
            hotend.ParseCurrentHotendTemperature();
            bed.ParseCurrentBedTemperature();

            // Trigger a re-render of the component
            await InvokeAsync(StateHasChanged);
        }
    }

    void IDisposable.Dispose()
    {
        timer.Dispose();
    }

}
