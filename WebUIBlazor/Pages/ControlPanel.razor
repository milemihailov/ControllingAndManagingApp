@page "/controlpanel"
@inject ControlPanelService ControlPanelService
@inject PrinterDataService PrinterDataService
@inject PrinterManagerService PrinterManagerService
@inject NavigationManager MyNavigationManager
@inject IJSRuntime JS

@using Plotly.Blazor.Interop
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Traces.ScatterLib
@using MachineControlHub.Motion
@using System.Text.RegularExpressions
@implements IDisposable


<PrinterState />
<PromptAndNotificationsHandler />


<MudGrid Style="width: 100vw;">

    @* Interactive Bed -------------------------------------------------------------- *@
    <MudItem xs="12" sm="12" md="12" lg="6">
        <MudGrid>
            <MudItem xs="10" sm="10" md="10" lg="10" Class="pr-0 mr-0">
                <div style="margin-right:0px; padding-left:0px;">
                    <PlotlyChart style="height: 60vh; width:100%; min-height: 350px"
                                 @bind-Config="Config" @bind-Layout="Layout" @bind-Data="Data" @ref="Chart"
                                 ClickAction="ClickAction" AfterRender="SubscribeEvents" />
                </div>
            </MudItem>
            <MudItem xs="2" sm="2" md="2" lg="2" Class="d-flex align-center pl-0 ml-0">
                <div style="margin-left:0px; padding-left:0px;">
                    <MudText Class="py-8 px-0 mx-0">X:<span style="color:limegreen;">@PrinterManagerService.ActivePrinter.Position.XCurrentPosition</span></MudText>
                    <MudText Class="py-8 px-0 mx-0">Y: <span style="color:limegreen;">@PrinterManagerService.ActivePrinter.Position.YCurrentPosition</span></MudText>
                    <MudText Class="py-8 px-0 mx-0">Z: <span style="color:limegreen;">@PrinterManagerService.ActivePrinter.Position.ZCurrentPosition</span></MudText>
                </div>
            </MudItem>
        </MudGrid>
    </MudItem>

    @* Control Panel -------------------------------------------------------------- *@
    <MudItem xs="12" sm="12" md="12" lg="2" Class="px-3">
        <div Class="py-5">
            <MudContainer MaxWidth="MaxWidth.Small" Class="px-2">
                <MudStack Row="true" AlignItems="AlignItems.Center" Class="mb-2">
                    <MudIconButton Class="mt-2" Variant="Variant.Text" OnClick=" () => ControlPanelService.AdjustAxis(MovePositions.XMovePos, true, PrinterManagerService.ActivePrinter)" Size="Size.Small" Color="Color.Tertiary">
                        <!-- Render the custom SVG file from wwwroot/svg/ -->
                        <img src="/svg/X+.svg" alt="Custom SVG" style="width:40px; height:30px;" />
                    </MudIconButton>
                    <MudIconButton Class="mt-2" Variant="Variant.Text" OnClick="() => ControlPanelService.AdjustAxis(MovePositions.YMovePos, true, PrinterManagerService.ActivePrinter)" Size="Size.Small" Color="Color.Tertiary">
                        <!-- Render the custom SVG file from wwwroot/svg/ -->
                        <img src="/svg/Y+.svg" alt="Custom SVG" style="width:40px; height:30px;" />
                    </MudIconButton>
                    <MudIconButton Class="mt-2" Variant="Variant.Text" OnClick="() => ControlPanelService.AdjustAxis(MovePositions.ZMovePos, true, PrinterManagerService.ActivePrinter)" Size="Size.Small" Color="Color.Tertiary">
                        <!-- Render the custom SVG file from wwwroot/svg/ -->
                        <img src="/svg/Z+.svg" alt="Custom SVG" style="width:40px; height:30px;" />
                    </MudIconButton>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="() => ControlPanelService.BabySteps(0.02, PrinterManagerService.ActivePrinter)">Z +0.02</MudButton>
                    <MudNumericField Margin="MudBlazor.Margin.Dense" Immediate="true" @bind-Value="PrinterManagerService.ActivePrinter.MotionSettings.FeedRateFreeMove" TextUpdateSuppression="false" Label="Set Feedrate" Variant="Variant.Outlined" Min="0" HideSpinButtons="true" />
                </MudStack>

                <MudStack Row="true" AlignItems="AlignItems.Center" Class="mb-2">
                    <MudIconButton Class="mt-2" Variant="Variant.Text" OnClick="() => ControlPanelService.AdjustAxis(MovePositions.XMovePos, false, PrinterManagerService.ActivePrinter)" Size="Size.Small" Color="Color.Tertiary">
                        <!-- Render the custom SVG file from wwwroot/svg/ -->
                        <img src="/svg/X-.svg" alt="Custom SVG" style="width:40px; height:30px;" />
                    </MudIconButton>
                    <MudIconButton Class="mt-2" Variant="Variant.Text" OnClick="() => ControlPanelService.AdjustAxis(MovePositions.YMovePos, false, PrinterManagerService.ActivePrinter)" Size="Size.Small" Color="Color.Tertiary">
                        <!-- Render the custom SVG file from wwwroot/svg/ -->
                        <img src="/svg/Y-.svg" alt="Custom SVG" style="width:40px; height:30px;" />
                    </MudIconButton>
                    <MudIconButton Class="mt-2" Variant="Variant.Text" OnClick="() => ControlPanelService.AdjustAxis(MovePositions.ZMovePos, false, PrinterManagerService.ActivePrinter)" Size="Size.Small" Color="Color.Tertiary">
                        <!-- Render the custom SVG file from wwwroot/svg/ -->
                        <img src="/svg/Z-.svg" alt="Custom SVG" style="width:40px; height:30px;" />
                    </MudIconButton>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="() => ControlPanelService.BabySteps(-0.02, PrinterManagerService.ActivePrinter)">Z -0.02</MudButton>
                    <MudText Typo="Typo.overline"><b>CURRENT FEEDRATE: </b> @(PrinterManagerService.ActivePrinter.MotionSettings.FeedRateFreeMove)(mm/min)</MudText>
                </MudStack>


                <MudStack Class="mb-2 flex-none" Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                    <MudText Align="Align.Center" Typo="Typo.subtitle2">Set A Moving Value:</MudText>
                    <MudChipSet @bind-SelectedChip="Selected" Filter="true" Mandatory="true">
                        <MudChip Text="0.1" Color="Color.Success" Value="@((double)0.1)">0.1 mm</MudChip>
                        <MudChip Text="1" Color="Color.Success" Value="@((double)1)">1 mm</MudChip>
                        <MudChip Default="true" Text="10" Color="Color.Success" Value="@((double)10)">10 mm</MudChip>
                        <MudChip Text="100" Color="Color.Success" Value="@((double)100)">100 mm</MudChip>
                    </MudChipSet>
                    @if (Selected != null)
                    {
                        ControlPanelService.ValueToMove = double.Parse(Selected.Text);
                    }
                </MudStack>
                <div Style="display: flex; justify-content: center;" Elevation="0">
                    <MudContainer>
                        <MudGrid Spacing="5" Justify="Justify.SpaceBetween">
                            <MudItem xs="4" Class="px-0">
                                <MudIconButton Class="mt-2" Variant="Variant.Text" OnClick="() => ControlPanelService.AdjustAxis(MovePositions.EMovePos, true, PrinterManagerService.ActivePrinter)" Size="Size.Small" Color="Color.Tertiary">
                                    <!-- Render the custom SVG file from wwwroot/svg/ -->
                                    <img src="/svg/Extrude.svg" alt="Custom SVG" style="width:40px; height:30px;" />
                                </MudIconButton>
                                <MudIconButton Class="mt-2" Variant="Variant.Text" OnClick="() => ControlPanelService.HomeAxisCommand(PrinterManagerService.ActivePrinter)" Color="Color.Tertiary">
                                    <!-- Render the custom SVG file from wwwroot/svg/ -->
                                    <img src="/svg/HomeAll.svg" alt="Custom SVG" style="width:40px; height:30px;" />
                                </MudIconButton>
                            </MudItem>
                            <MudItem xs="4" Class="px-0">
                                <MudIconButton Class="mt-2" Variant="Variant.Text" OnClick="() => ControlPanelService.AdjustAxis(MovePositions.EMovePos, false, PrinterManagerService.ActivePrinter)" Size="Size.Small" Color="Color.Tertiary">
                                    <!-- Render the custom SVG file from wwwroot/svg/ -->
                                    <img src="/svg/Retract.svg" alt="Custom SVG" style="width:40px; height:30px;" />
                                </MudIconButton>
                                <MudIconButton Class="mt-2" Variant="Variant.Text" OnClick="() => ControlPanelService.HomeAxisCommand(PrinterManagerService.ActivePrinter, true, true)" Size="Size.Small" Color="Color.Tertiary">
                                    <!-- Render the custom SVG file from wwwroot/svg/ -->
                                    <img src="/svg/XYHome.svg" alt="Custom SVG" style="width:40px; height:30px;" />
                                </MudIconButton>
                            </MudItem>
                            <MudItem xs="4" Class="px-0">
                                <MudTooltip Text="Disable Stepper Motors">
                                    <MudIconButton Class="mt-2" Variant="Variant.Text" OnClick="() => ControlPanelService.DisableSteppers(PrinterManagerService.ActivePrinter)" Size="Size.Small" Color="Color.Tertiary">
                                        <!-- Render the custom SVG file from wwwroot/svg/ -->
                                        <img src="/svg/DisableMotors.svg" alt="Custom SVG" style="width:40px; height:30px;" />
                                    </MudIconButton>
                                </MudTooltip>
                                <MudIconButton Class="mt-2" Variant="Variant.Text" OnClick="() => ControlPanelService.HomeAxisCommand(PrinterManagerService.ActivePrinter, false, false, true)" Size="Size.Small" Color="Color.Tertiary">
                                    <!-- Render the custom SVG file from wwwroot/svg/ -->
                                    <img src="/svg/ZHome.svg" alt="Custom SVG" style="width:40px; height:30px;" />
                                </MudIconButton>
                            </MudItem>
                        </MudGrid>

                        <MudGrid Spacing="5" Justify="Justify.SpaceBetween">
                            <MudItem xs="12" Class="px-0">
                                <MudTooltip Text="Z Align">
                                    <MudIconButton Class="mt-2" Variant="Variant.Text" OnClick="() => ControlPanelService.ZSteppersAutoAlignment(PrinterManagerService.ActivePrinter)" Size="Size.Small" Color="Color.Tertiary">
                                        <!-- Render the custom SVG file from wwwroot/svg/ -->
                                        <img src="/svg/AlignZ.svg" alt="Custom SVG" style="width:40px; height:30px;" />
                                    </MudIconButton>
                                </MudTooltip>
                            </MudItem>
                        </MudGrid>
                    </MudContainer>
                </div>
            </MudContainer>
        </div>
    </MudItem>


    @* Console Output -------------------------------------------------------------- *@
    <MudItem xs="12" sm="12" md="12" lg="4">
        <MudPaper Class="d-flex mud-height-full" MaxHeight="800px">
            <textarea id="consoleOutput" style="width:100%; padding:5px; resize: none;" readonly rows="10" cols="50">@ControlPanelService.ConsoleOutput</textarea>
        </MudPaper>
        <form @onsubmit="() => ControlPanelService.SendGcodeViaTerminal(ControlPanelService.SendCommand, PrinterManagerService.ActivePrinter)">
            <MudFocusTrap>
                <MudTextField T="string" Label="Send G-Code Commands" Variant="Variant.Outlined" Clearable="true" @bind-Value="ControlPanelService.SendCommand" />
            </MudFocusTrap>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Send" FullWidth="true">Send</MudButton>
        </form>
        <MudSwitch Label="Show SD messages" @bind-Value="@ControlPanelService.ShowSDMessages" @onclick="ControlPanelService.ToggleSDMessages" Color="Color.Success" Class="mr-n2 mb-6" />
        <MudSwitch Label="Show temperature messages" @bind-Value="@ControlPanelService.ShowTemperatureMessages" @onclick="ControlPanelService.ToggleTemperatureMessages" Color="Color.Success" Class="mr-n2 mb-6" />
        <MudSwitch Label="Show position messages" @bind-Value="@ControlPanelService.ShowPositionMessages" @onclick="ControlPanelService.TogglePositionMessages" Color="Color.Success" Class="mr-n2 mb-6" />
        <MudSwitch Label="Show busy messages" @bind-Value="@ControlPanelService.ShowBusyMessages" @onclick="ControlPanelService.ToggleBusyMessages" Color="Color.Success" Class="mr-n2 mb-6" />
    </MudItem>
</MudGrid>

@code {

    MudChip Selected { get; set; }
    private PlotlyChart Chart { get; set; }
    private Config Config { get; set; }
    private Layout Layout { get; set; }
    private IList<ITrace> Data { get; set; }
    private IEnumerable<EventDataPoint> ClickInfos { get; set; }

    protected override void OnInitialized()
    {
        PrinterManagerService.ActivePrinterChanged += OnSelectedPrinter;

        if (PrinterManagerService.Printers != null && PrinterManagerService.Printers.Count > 0)
        {
            // request x, y, z max values to set the interactive bed size
            PrinterDataService.RequestSoftwareEndstopSettings(PrinterManagerService.ActivePrinter);

            // request current position
            PrinterDataService.RequestCurrentPositions(PrinterManagerService.ActivePrinter);

            PrinterManagerService.InputReceived += OnUpdate;
        }



        /// Initialize the interactive bed
        Config = new Config
            {
                Responsive = true
            };

        Layout = new Layout
            {
                Title = new Title
                {
                    Text = "Interactive Bed",

                },
                PaperBgColor = "#32333d",
                PlotBgColor = "#6E9075",
                Font = new Font
                {
                    Color = "#FFF"
                }
            };
        Data = new List<ITrace>
            {
            new Scatter
            {
                Name = "ScatterTrace",
                Mode = ModeFlag.None,
                X = Enumerable.Range(0, PrinterManagerService.ActivePrinter.Bed.XSize + 1).SelectMany(_ => Enumerable.Range(0, PrinterManagerService.ActivePrinter.Bed.XSize + 1)).Cast<object>().ToList(),
                Y = Enumerable.Range(0, PrinterManagerService.ActivePrinter.Bed.YSize + 1).SelectMany(y => Enumerable.Repeat(y, PrinterManagerService.ActivePrinter.Bed.YSize + 1)).Cast<object>().ToList()
            }
            };
    }

    /// <summary>
    /// Refreshes the component state when toggling between printers.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    public async void OnSelectedPrinter(object sender, EventArgs e)
    {
        try
        {
            await InvokeAsync(() => MyNavigationManager.NavigateTo(MyNavigationManager.Uri, true));
        }
        catch (NavigationException navEx)
        {
            Console.WriteLine($"Navigation error: {navEx.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected error: {ex.Message}");
        }
    }

    /// <summary>
    ///  Automatically scrolls the console output to the bottom.
    /// </summary>
    /// <returns></returns>
    public async Task ScrollConsoleOutputToBottom()
    {
        await JS.InvokeVoidAsync("updateConsole", "consoleOutput");
    }

    /// <summary>
    /// Handles updates from the printer.
    /// </summary>
    /// <param name="input"></param>
    public async void OnUpdate(string input)
    {
        await Task.Run(() =>
        {
            // update the interactive bed size
            PrinterDataService.SetBedVolume(input, PrinterManagerService.ActivePrinter);

            // update the current positions
            PrinterDataService.GetCurrentPositions(input, PrinterManagerService.ActivePrinter);

            // update the console output
            ControlPanelService.UpdateParagraph(input, PrinterManagerService.ActivePrinter);

            InvokeAsync(StateHasChanged);
        });

        await ScrollConsoleOutputToBottom();
    }

    /// <summary>
    /// Handles the click event on the interactive bed.
    /// </summary>
    /// <param name="eventData"></param>
    public void ClickAction(IEnumerable<EventDataPoint> eventData)
    {
        ClickInfos = eventData;
        StoreClickedValues();
        StateHasChanged();
    }

    /// <summary>
    /// Subscribes to the click event on the interactive bed.
    /// </summary>
    public async void SubscribeEvents()
    {
        await Chart.SubscribeClickEvent();
    }

    /// <summary>
    /// Handles the interaction with the interactive bed.
    /// </summary>
    private void StoreClickedValues()
    {
        if (ClickInfos != null && ClickInfos.Any())
        {
            // get the x and y values from the clicked point
            string x = ClickInfos.First().X.ToString();
            string y = ClickInfos.FirstOrDefault(d => d.TraceIndex == 0)?.Y.ToString();

            // parse the x and y values to double and store them in the printer's position
            PrinterManagerService.ActivePrinter.Position.XMovePosition = double.Parse(x);
            PrinterManagerService.ActivePrinter.Position.YMovePosition = double.Parse(y);

            // set to null to avoid unwanted movements
            PrinterManagerService.ActivePrinter.Position.ZMovePosition = null;
            PrinterManagerService.ActivePrinter.Position.EMovePosition = null;

            // set positioning mode
            PrinterManagerService.ActivePrinter.SerialConnection.Write(CommandMethods.BuildAbsolutePositionCommand());

            // move to desired position
            PrinterManagerService.ActivePrinter.SerialConnection.Write(CommandMethods.BuildLinearMoveCommand(PrinterManagerService.ActivePrinter.Position, PrinterManagerService.ActivePrinter.MotionSettings));

            // request current position
            PrinterManagerService.ActivePrinter.SerialConnection.Write("M114");
        }
    }

    void IDisposable.Dispose()
    {
        PrinterManagerService.InputReceived -= OnUpdate;
        PrinterManagerService.ActivePrinterChanged -= OnSelectedPrinter;

    }
}