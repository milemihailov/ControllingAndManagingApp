@page "/controlpanel"
@inject Data.ConnectionServiceSerial serial
@inject Data.ControlPanelService control
@using Plotly.Blazor.Interop
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Traces.ScatterLib
@using MachineControlHub.Motion
@using System.Text.RegularExpressions
@implements IDisposable


@if (serial.isConnected == "Connected")
{
    <MudAlert Severity="Severity.Success" Variant="Variant.Filled">@serial.isConnected</MudAlert>
}
else
{
    <MudAlert Severity="Severity.Error" Class="sticky-lg-top" Variant="Variant.Filled">@serial.isConnected</MudAlert>
}
<MudGrid>
    <MudItem xs="4">
        <MudPaper Elevation="4">
            <PlotlyChart style="height: 60vh; width:100%; min-height: 350px"
                         @bind-Config="config" @bind-Layout="layout" @bind-Data="data" @ref="chart"
                         ClickAction="ClickAction" AfterRender="SubscribeEvents" />
        </MudPaper>
    </MudItem>
    <MudItem xs="4" Class="px-0">
        <MudPaper Height="100%" Width="100%" Elevation="0">
            <MudContainer MaxWidth="MaxWidth.Small" Class="px-0">
                <MudStack Row="true" AlignItems="AlignItems.Center" Class="mb-2">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => control.AdjustAxis(MovePositions.XMovePos,true,serial)">X+</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => control.AdjustAxis(MovePositions.YMovePos,true,serial)">Y+</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => control.AdjustAxis(MovePositions.ZMovePos,true,serial)">Z+</MudButton>
                    <MudNumericField Margin="MudBlazor.Margin.None" @bind-Value="control.feedRate.FeedRateFreeMove" Label="Set Feedrate" Variant="Variant.Outlined" Min="0" HideSpinButtons="true" />
                </MudStack>

                <MudStack Row="true" AlignItems="AlignItems.Center" Class="mb-2">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => control.AdjustAxis(MovePositions.XMovePos,false,serial)">X-</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => control.AdjustAxis(MovePositions.YMovePos,false,serial)">Y-</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => control.AdjustAxis(MovePositions.ZMovePos,false,serial)">Z-</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary">Set Feedrate</MudButton>
                </MudStack>


                <MudStack Class="mb-2 flex-none" Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                    <MudText Align="Align.Center" Typo="Typo.subtitle2">Set A Moving Value:</MudText>
                    <MudChipSet @bind-SelectedChip="selected" Filter="true" Mandatory="true">
                        <MudChip Text="0.1" Color="Color.Success" Value="@((double)0.1)">0.1 mm</MudChip>
                        <MudChip Text="1" Color="Color.Success" Value="@((double)1)">1 mm</MudChip>
                        <MudChip Text="10" Color="Color.Success" Value="@((double)10)">10 mm</MudChip>
                        <MudChip Text="100" Color="Color.Success" Value="@((double)100)">100 mm</MudChip>
                    </MudChipSet>
                    @if (selected != null)
                    {
                        control.valueToMove = double.Parse(@selected.Text);
                    }
                </MudStack>

                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="control.DisableSteppers">Disable Motors</MudButton>

                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => control.HomeAxisCommand()">HomeAll</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => control.HomeAxisCommand(true,true)">HomeXY</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => control.HomeAxisCommand(false,false,true)">HomeZ</MudButton>

                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => control.AdjustAxis(MovePositions.EMovePos,true,serial)">Extrude</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => control.AdjustAxis(MovePositions.EMovePos,false,serial)">Retract</MudButton>

                <MudSwitch @onclick="() => {control.SetFanSpeed(fanSpeed);ToggleValue();}" @bind-Value="@SwitchValue" Color="Color.Primary" Class="mr-n2 mb-6" />

                <MudSlider Class="d-inline-block" @bind-Value="@control.defaultFanSpeed" Vertical="true" Min="0" Max="255" @onchange="() => control.SetFanSpeed(control.defaultFanSpeed)" />
                <MudText>@control.fanSpeedInPercentage%</MudText>
            </MudContainer>
        </MudPaper>
    </MudItem>

    <MudItem xs="4">
        <MudPaper Class="d-flex mud-height-full">
            <textarea style="width:100%" readonly rows="10" cols="50">@control.consoleOutput</textarea>
        </MudPaper>
        <MudTextField T="string" Label="Send G-Code Commands" Variant="Variant.Outlined" Clearable="true" @bind-Value="control.sendCommand" />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Send" FullWidth="true" @onclick="() => control.SendGcodeViaTerminal(control.sendCommand,serial)">Send</MudButton>
    </MudItem>
</MudGrid>


@code {

    protected override void OnInitialized()
    {
        timer = new Timer(UpdateParagraph, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));

        config = new Config
            {
                Responsive = true
            };

        layout = new Layout
            {
                Title = new Title
                {
                    Text = "Interactive Bed"
                },
                PaperBgColor = "#FDF0D5",
                PlotBgColor = "#AAAFB5"
            };

        data = new List<ITrace>
            {
            new Scatter
            {
                Name = "ScatterTrace",
                Mode = ModeFlag.None,
                X = Enumerable.Range(0, 201).SelectMany(_ => Enumerable.Range(0, 201)).Cast<object>().ToList(),
                Y = Enumerable.Range(0, 201).SelectMany(y => Enumerable.Repeat(y, 201)).Cast<object>().ToList()
            }
            };

    }
}