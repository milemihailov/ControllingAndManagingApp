@page "/controlpanel"
@inject Data.ConnectionServiceSerial serial
@inject Data.ControlPanelService control
@using Plotly.Blazor.Interop
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Traces.ScatterLib
@using MachineControlHub.Motion
@implements IDisposable


<div class="center-div">
<h5 style="color: @(serial.isConnected == "Connected" ? "green" : "red")">@serial.isConnected</h5>
<br />
<br />

    <h1>ControlPanel</h1>

    <PlotlyChart style="height: 60vh; width:40%; min-height: 350px"
                 @bind-Config="config" @bind-Layout="layout" @bind-Data="data" @ref="chart"
                 ClickAction="ClickAction" AfterRender="SubscribeEvents" />

    @if (ClickInfos != null && ClickInfos.Any())
    {
        <MudText>
            Current X: @ClickInfos.First().X
        </MudText>
        <MudText>Current Y: @ClickInfos.FirstOrDefault(d => d.TraceIndex == 0)?.Y</MudText>
    }


<button class="button-30" @onclick="() => control.AdjustAxis(MovePositions.XMovePos,true,serial)">X+</button>
<button class="button-30" @onclick="() => control.AdjustAxis(MovePositions.YMovePos,true,serial)">Y+</button>
<button class="button-30" @onclick="() => control.AdjustAxis(MovePositions.ZMovePos,true,serial)">Z+</button>


<button class="button-30" @onclick="() => control.AdjustAxis(MovePositions.XMovePos,false,serial)">X-</button>
<button class="button-30" @onclick="() => control.AdjustAxis(MovePositions.YMovePos,false,serial)">Y-</button>
<button class="button-30" @onclick="() => control.AdjustAxis(MovePositions.ZMovePos,false,serial)">Z-</button>

<p style="font-weight: bold">Feedrate: <input type="number" @bind="@control.feedRate.FeedRateFreeMove" /></p>


<div>
    <label class="btn btn-secondary" @onclick="() => control.UpdateIncrementalMovementValue(Data.ControlPanelService.AXIS_MOVEMENT_BY_0_1)">
        <input type="radio" name="options" id="option3" autocomplete="off"> 0.1 mm
    </label>
    <label class="btn btn-secondary" @onclick="() => control.UpdateIncrementalMovementValue(Data.ControlPanelService.AXIS_MOVEMENT_BY_1)">
        <input type="radio" name="options" id="option3" autocomplete="off"> 1 mm
    </label>
    <label class="btn btn-secondary" @onclick="() => control.UpdateIncrementalMovementValue(Data.ControlPanelService.AXIS_MOVEMENT_BY_10)">
        <input type="radio" name="options" id="option3" autocomplete="off" checked> 10 mm
    </label>
    <label class="btn btn-secondary" @onclick="() => control.UpdateIncrementalMovementValue(Data.ControlPanelService.AXIS_MOVEMENT_BY_100)">
        <input type="radio" name="options" id="option3" autocomplete="off"> 100 mm
    </label>
</div>

<button class="btn-outline-primary" @onclick="control.DisableSteppers">DisableMotors</button>

<button class="btn-outline-primary" @onclick="() => control.HomeAxisCommand()">HomeAll</button>
<button class="btn-outline-primary" @onclick="() => control.HomeAxisCommand(true,true)">HomeXY</button>
<button class="btn-outline-primary" @onclick="() => control.HomeAxisCommand(false,false,true)">HomeZ</button>

<button class="btn-outline-primary" @onclick="() => control.AdjustAxis(MovePositions.EMovePos,true,serial)">Extrude</button>
<button class="btn-outline-primary" @onclick="() => control.AdjustAxis(MovePositions.EMovePos,false,serial)">Retract</button>


<button class="btn-outline-primary" @onclick="() => control.SetFanOff()">Fan Off</button>
<button class="btn-outline-primary" @onclick="() => control.SetFanSpeed(Data.ControlPanelService.MAX_FAN_SPEED)">Fan On</button>

<p style="font-weight: bold">
    Fan Speed: 0%
    <input width="400" type="range" min="0" max="255" @bind="control.defaultFanSpeed" @onclick="() => control.SetFanSpeed(control.defaultFanSpeed)">100%
</p>
<div>
    <textarea style="width:100%" readonly rows="10" cols="50">@output</textarea>
</div>
<input style="width:95%" type="text" placeholder="Send G-Code Commands" @bind="control.sendCommand" />
<button @onclick="() => control.SendGcodeViaTerminal(control.sendCommand,serial)">Send</button>
</div>

@code {
    private string output;
    [CascadingParameter]
    private MudTheme Theme { get; set; }

    private PlotlyChart chart;
    private Config config;
    private Layout layout;
    private IList<ITrace> data;
    private IEnumerable<EventDataPoint> ClickInfos { get; set; }
    private Timer timer;

    protected override void OnInitialized()
    {
        timer = new Timer(UpdateParagraph, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));

        config = new Config
            {
                Responsive = true
            };

        layout = new Layout
            {
                Title = new Title
                {
                    Text = "Interactive Bed"
                },
                PaperBgColor = "#FDF0D5",
                PlotBgColor = "#AAAFB5"
            };

        data = new List<ITrace>
        {
            new Scatter
            {
                Name = "ScatterTrace",
                Mode = ModeFlag.None,
                X = Enumerable.Range(0, 201).SelectMany(_ => Enumerable.Range(0, 201)).Cast<object>().ToList(),
                Y = Enumerable.Range(0, 201).SelectMany(y => Enumerable.Repeat(y, 201)).Cast<object>().ToList()
            }
        };
    }

    private async void UpdateParagraph(object state)
    {
        if (serial.initialized)
        {
            Thread.Sleep(50);
            output += serial.Read();

            await InvokeAsync(StateHasChanged);
        }
    }

        public void ClickAction(IEnumerable<EventDataPoint> eventData)
        {
            ClickInfos = eventData;
            StoreClickedValues();
            StateHasChanged();
        }

        public async void SubscribeEvents()
        {
            await chart.SubscribeClickEvent();
        }

        MachineControlHub.Motion.Position pos = new();
        MotionSettingsData feedrate = new();

        private void StoreClickedValues()
        {
            if (ClickInfos != null && ClickInfos.Any())
            {
                string x = ClickInfos.First().X.ToString();
                string y = ClickInfos.FirstOrDefault(d => d.TraceIndex == 0)?.Y.ToString();
                pos.XMovePosition = double.Parse(x);
                pos.YMovePosition = double.Parse(y);
                Console.WriteLine(pos.YMovePosition);
                serial.Write(CommandMethods.BuildAbsolutePositionCommand());
                serial.Write(CommandMethods.BuildLinearMoveCommand(pos, feedrate));
            }
        }

    void IDisposable.Dispose()
    {
        timer.Dispose();
    }
}
