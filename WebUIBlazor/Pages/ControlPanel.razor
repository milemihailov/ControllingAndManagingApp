@page "/controlpanel"
@inject ControlPanelService ControlPanelService
@inject PrinterDataService PrinterDataService
@inject PrinterManagerService PrinterManagerService
@inject NavigationManager MyNavigationManager

@using Plotly.Blazor.Interop
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Traces.ScatterLib
@using MachineControlHub.Motion
@using System.Text.RegularExpressions
@implements IDisposable


<PrinterState />
<MudGrid Style="width: 100vw;">

    @* Interactive Bed -------------------------------------------------------------- *@
    <MudItem xs="12" md="6" lg="4">
        <MudPaper Elevation="0">
            <PlotlyChart style="height: 60vh; width:100%; min-height: 350px"
                         @bind-Config="Config" @bind-Layout="Layout" @bind-Data="Data" @ref="Chart"
                         ClickAction="ClickAction" AfterRender="SubscribeEvents" />
        </MudPaper>
    </MudItem>

    @* Control Panel -------------------------------------------------------------- *@
    <MudItem xs="12" md="6" lg="4" Class="px-3">
        <div Class="py-5">
            <MudContainer MaxWidth="MaxWidth.Small" Class="px-2">
                <MudStack Row="true" AlignItems="AlignItems.Center" Class="mb-2">
                    <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="() => ControlPanelService.AdjustAxis(MovePositions.XMovePos,true)">X+</MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="() => ControlPanelService.AdjustAxis(MovePositions.YMovePos,true)">Y+</MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="() => ControlPanelService.AdjustAxis(MovePositions.ZMovePos,true)">Z+</MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="() => ControlPanelService.BabySteps(0.02)">Z +0.02</MudButton>
                    <MudNumericField Margin="MudBlazor.Margin.Dense" Immediate="true" @bind-Value="ControlPanelService.FeedRate.FeedRateFreeMove" TextUpdateSuppression="false" Label="Set Feedrate" Variant="Variant.Outlined" Min="0" HideSpinButtons="true" />
                </MudStack>

                <MudStack Row="true" AlignItems="AlignItems.Center" Class="mb-2">
                    <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="() => ControlPanelService.AdjustAxis(MovePositions.XMovePos,false)">X-</MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="() => ControlPanelService.AdjustAxis(MovePositions.YMovePos,false)">Y-</MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="() => ControlPanelService.AdjustAxis(MovePositions.ZMovePos,false)">Z-</MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="() => ControlPanelService.BabySteps(-0.02)">Z -0.02</MudButton>
                    <MudText Typo="Typo.overline"><b>CURRENT FEEDRATE: </b> @(ControlPanelService.FeedRate.FeedRateFreeMove)(mm/min)</MudText>
                </MudStack>


                <MudStack Class="mb-2 flex-none" Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                    <MudText Align="Align.Center" Typo="Typo.subtitle2">Set A Moving Value:</MudText>
                    <MudChipSet @bind-SelectedChip="Selected" Filter="true" Mandatory="true">
                        <MudChip Text="0.1" Color="Color.Success" Value="@((double)0.1)">0.1 mm</MudChip>
                        <MudChip Text="1" Color="Color.Success" Value="@((double)1)">1 mm</MudChip>
                        <MudChip Text="10" Color="Color.Success" Value="@((double)10)">10 mm</MudChip>
                        <MudChip Text="100" Color="Color.Success" Value="@((double)100)">100 mm</MudChip>
                    </MudChipSet>
                    @if (Selected != null)
                    {
                        ControlPanelService.ValueToMove = double.Parse(Selected.Text);
                    }
                </MudStack>
                <div Style="display: flex; justify-content: center;" Elevation="0">
                    <MudContainer>
                        <MudGrid Spacing="5" Justify="Justify.SpaceBetween">
                            <MudItem xs="4" Class="px-0">
                                <MudButton Style="white-space: nowrap;" FullWidth="true" Variant="Variant.Text" Color="Color.Primary" @onclick="() => ControlPanelService.AdjustAxis(MovePositions.EMovePos,true)">Extrude</MudButton>
                                <MudButton Style="white-space: nowrap;" FullWidth="true" Variant="Variant.Text" Color="Color.Primary" @onclick="() => ControlPanelService.HomeAxisCommand()">HomeAll</MudButton>
                            </MudItem>
                            <MudItem xs="4" Class="px-0">
                                <MudButton Style="white-space: nowrap;" FullWidth="true" Variant="Variant.Text" Color="Color.Primary" @onclick="() => ControlPanelService.AdjustAxis(MovePositions.EMovePos,false)">Retract</MudButton>
                                <MudButton Style="white-space: nowrap;" FullWidth="true" Variant="Variant.Text" Color="Color.Primary" @onclick="() => ControlPanelService.HomeAxisCommand(true,true)">HomeXY</MudButton>
                            </MudItem>
                            <MudItem xs="4" Class="px-0">
                                <MudButton Style="white-space: nowrap;" FullWidth="true" Variant="Variant.Text" Color="Color.Primary" @onclick="ControlPanelService.DisableSteppers">Disable Motors</MudButton>
                                <MudButton Style="white-space: nowrap;" FullWidth="true" Variant="Variant.Text" Color="Color.Primary" @onclick="() => ControlPanelService.HomeAxisCommand(false,false,true)">HomeZ</MudButton>
                            </MudItem>
                        </MudGrid>

                        <MudGrid Spacing="5" Justify="Justify.SpaceBetween">
                            <MudItem xs="12" Class="px-0">
                                <MudButton Style="white-space: nowrap;" FullWidth="true" Variant="Variant.Text" Color="Color.Primary" @onclick="ControlPanelService.ZSteppersAutoAlignment">Align Z</MudButton>
                            </MudItem>
                        </MudGrid>

                        <MudSwitch Label="Turn Fan On/Off" @bind-Value="@ControlPanelService.SwitchValue" @onclick="() => {ControlPanelService.ToggleValue();ControlPanelService.SetFanSpeed(ControlPanelService.FanSpeed);}" Color="Color.Success" Class="mr-n2 mb-6" />
                        <MudSlider Size="Size.Large" @bind-Value="@ControlPanelService.DefaultFanSpeed" Min="0" Max="255" @onchange="() => ControlPanelService.SetFanSpeed(ControlPanelService.DefaultFanSpeed)">Fan Speed: @ControlPanelService.FanSpeedInPercentage% </MudSlider>
                        <MudSlider Size="Size.Large" @bind-Value="@ControlPanelService.FeedRatePercentage" Min="0" Max="500" @onchange="() => ControlPanelService.SetFeedRatePercentage(ControlPanelService.FeedRatePercentage)">Print Speed: @ControlPanelService.FeedRatePercentage% </MudSlider>
                        <MudSlider Size="Size.Large" @bind-Value="@ControlPanelService.PrintFlowPercentage" Min="0" Max="500" @onchange="() => ControlPanelService.SetPrintFlowPercentage(ControlPanelService.PrintFlowPercentage)">Print Flow: @ControlPanelService.PrintFlowPercentage% </MudSlider>
                        <div>
                            <MudChart ChartType="ChartType.StackedBar" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="350px"></MudChart>
                        </div>
                    </MudContainer>
                </div>
            </MudContainer>
        </div>
    </MudItem>


    @* Console Output -------------------------------------------------------------- *@
    <MudItem xs="12" md="12" lg="4">
        <MudPaper Class="d-flex mud-height-full" MaxHeight="600px">
            <textarea id="consoleOutput" style="width:100%; padding:5px; resize: none;" readonly rows="10" cols="50">@ControlPanelService.ConsoleOutput</textarea>
        </MudPaper>
        <form @onsubmit="() => ControlPanelService.SendGcodeViaTerminal(ControlPanelService.SendCommand)">
            <MudFocusTrap>
                <MudTextField T="string" Label="Send G-Code Commands" Variant="Variant.Outlined" Clearable="true" @bind-Value="ControlPanelService.SendCommand" />
            </MudFocusTrap>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Send" FullWidth="true">Send</MudButton>
        </form>
    </MudItem>
</MudGrid>

@code {

    private int Index = -1;
    public List<ChartSeries> Series { get; set; }

    public string[] XAxisLabels { get; set; } = { "Fan Speed", "Print Flow", "Print Speed" };
    [CascadingParameter]
    private MudTheme Theme { get; set; }
    MudChip Selected { get; set; }
    private PlotlyChart Chart { get; set; }
    private Config Config { get; set; }
    private Layout Layout { get; set; }
    private IList<ITrace> Data { get; set; }
    private IEnumerable<EventDataPoint> ClickInfos { get; set; }
    int XSize { get; set; }
    int YSize { get; set; }

    protected override void OnInitialized()
    {
        PrinterManagerService.ActivePrinterChanged += OnSelectedPrinter;

        if (PrinterManagerService.Printers != null && PrinterManagerService.Printers.Count > 0)
        {
            PrinterManagerService.InputReceived += OnUpdate;
        }

        XSize = PrinterManagerService.ActivePrinter.Bed?.XSize ?? 0;
        YSize = PrinterManagerService.ActivePrinter.Bed?.YSize ?? 0;

        Series = new List<ChartSeries>
    {
        new ChartSeries() { Name = "Fan Speed", Data = new double[] { ControlPanelService.FanSpeedInPercentage, ControlPanelService.FeedRatePercentage , ControlPanelService.PrintFlowPercentage } },
    };
        Config = new Config
            {
                Responsive = true
            };

        Layout = new Layout
            {
                Title = new Title
                {
                    Text = "Interactive Bed",

                },
                PaperBgColor = "#32333d",
                PlotBgColor = "#6E9075",
                Font = new Font
                {
                    Color = "#FFF"
                }
            };
        Data = new List<ITrace>
            {
            new Scatter
            {
                Name = "ScatterTrace",
                Mode = ModeFlag.None,
                X = Enumerable.Range(0, XSize + 1).SelectMany(_ => Enumerable.Range(0, XSize + 1)).Cast<object>().ToList(),
                Y = Enumerable.Range(0, YSize + 1).SelectMany(y => Enumerable.Repeat(y, YSize + 1)).Cast<object>().ToList()
            }
            };
    }

    public async void OnSelectedPrinter(object sender, EventArgs e)
    {
        try
        {
            await InvokeAsync(() => MyNavigationManager.NavigateTo(MyNavigationManager.Uri, true));
        }
        catch (NavigationException navEx)
        {
            Console.WriteLine($"Navigation error: {navEx.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected error: {ex.Message}");
        }
    }

    public async void OnUpdate(string message)
    {
        Series = new List<ChartSeries>
    {
        new ChartSeries() { Name = "Fan Speed", Data = new double[] { ControlPanelService.FanSpeedInPercentage, ControlPanelService.FeedRatePercentage ,ControlPanelService.PrintFlowPercentage } },
    };
        await Task.Run(() =>
        {
            ControlPanelService.UpdateParagraph(message);
            PrinterDataService.SetBedVolume(message);
            InvokeAsync(StateHasChanged);
        });
    }


    public void ClickAction(IEnumerable<EventDataPoint> eventData)
    {
        ClickInfos = eventData;
        StoreClickedValues();
        StateHasChanged();
    }

    public async void SubscribeEvents()
    {
        await Chart.SubscribeClickEvent();
    }

    private void StoreClickedValues()
    {
        if (ClickInfos != null && ClickInfos.Any())
        {
            string x = ClickInfos.First().X.ToString();
            string y = ClickInfos.FirstOrDefault(d => d.TraceIndex == 0)?.Y.ToString();
            ControlPanelService.PositionToMove.XMovePosition = double.Parse(x);
            ControlPanelService.PositionToMove.YMovePosition = double.Parse(y);
            ControlPanelService.Printer.ActivePrinter.SerialConnection.Write(CommandMethods.BuildAbsolutePositionCommand());
            ControlPanelService.Printer.ActivePrinter.SerialConnection.Write(CommandMethods.BuildLinearMoveCommand(ControlPanelService.PositionToMove, ControlPanelService.FeedRate));
            ControlPanelService.Printer.ActivePrinter.SerialConnection.Write(CommandMethods.BuildRelativePositionCommand());
        }
    }

    void IDisposable.Dispose()
    {

        PrinterManagerService.InputReceived -= OnUpdate;
        PrinterManagerService.ActivePrinterChanged -= OnSelectedPrinter;

    }
}