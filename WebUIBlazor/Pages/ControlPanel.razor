@page "/controlpanel"
@inject Data.ConnectionServiceSerial serial
@inject Data.ControlPanelService control

@implements IDisposable

@using MachineControlHub.Motion;
@using MachineControlHub.PrinterConnection;

<h5 style="color: @(serial.isConnected == "Connected" ? "green" : "red")">@serial.isConnected</h5>
<br />
<br />

<h3>ControlPanel</h3>


<button class="btn-outline-primary" @onclick="() => control.AdjustAxis(MovePositions.XMovePos,true,serial)">X+</button>
<button class="btn-outline-primary" @onclick="() => control.AdjustAxis(MovePositions.YMovePos,true,serial)">Y+</button>
<button class="btn-outline-primary" @onclick="() => control.AdjustAxis(MovePositions.ZMovePos,true,serial)">Z+</button>


<br />
<br />
<button class="btn-outline-primary" @onclick="() => control.AdjustAxis(MovePositions.XMovePos,false,serial)">X-</button>
<button class="btn-outline-primary" @onclick="() => control.AdjustAxis(MovePositions.YMovePos,false,serial)">Y-</button>
<button class="btn-outline-primary" @onclick="() => control.AdjustAxis(MovePositions.ZMovePos,false,serial)">Z-</button>
<br />
<br />
<p style="font-weight: bold">Feedrate: <input type="number" @bind="@control.feedRate.FeedRateFreeMove" /></p>


<div>
    <label class="btn btn-secondary" @onclick="() => control.UpdateIncrementalMovementValue(Data.ControlPanelService.AXIS_MOVEMENT_BY_0_1)">
        <input type="radio" name="options" id="option3" autocomplete="off"> 0.1 mm
    </label>
    <label class="btn btn-secondary" @onclick="() => control.UpdateIncrementalMovementValue(Data.ControlPanelService.AXIS_MOVEMENT_BY_1)">
        <input type="radio" name="options" id="option3" autocomplete="off"> 1 mm
    </label>
    <label class="btn btn-secondary" @onclick="() => control.UpdateIncrementalMovementValue(Data.ControlPanelService.AXIS_MOVEMENT_BY_10)">
        <input type="radio" name="options" id="option3" autocomplete="off" checked> 10 mm
    </label>
    <label class="btn btn-secondary" @onclick="() => control.UpdateIncrementalMovementValue(Data.ControlPanelService.AXIS_MOVEMENT_BY_100)">
        <input type="radio" name="options" id="option3" autocomplete="off"> 100 mm
    </label>
</div>
<br />
<button class="btn-outline-primary" @onclick="() => serial.Write(CommandMethods.BuildDisableSteppersCommand())">DisableMotors</button>
<br />
<br />
<button class="btn-outline-primary" @onclick="() => serial.Write(CommandMethods.BuildHomeAxesCommand())">HomeAll</button>
<button class="btn-outline-primary" @onclick="() => serial.Write(CommandMethods.BuildHomeAxesCommand(true,true))">HomeXY</button>
<button class="btn-outline-primary" @onclick="() => serial.Write(CommandMethods.BuildHomeAxesCommand(false,false,true))">HomeZ</button>
<br />
<br />
<button class="btn-outline-primary" @onclick="() => control.AdjustAxis(MovePositions.EMovePos,true,serial)">Extrude</button>
<button class="btn-outline-primary" @onclick="() => control.AdjustAxis(MovePositions.EMovePos,false,serial)">Retract</button>
<br />
<br />
<button class="btn-outline-primary" @onclick="() => serial.Write(CommandMethods.BuildFilamentChangeCommand())">Change Filament</button>
<br />
<br />

<button class="btn-outline-primary" @onclick="() => serial.Write(CommandMethods.BuildFanOffCommand())">Fan Off</button>
<button class="btn-outline-primary" @onclick="() => serial.Write(CommandMethods.BuildFanSpeedCommand(Data.ControlPanelService.MAX_FAN_SPEED))">Fan On</button>
<br />
<br />
<p style="font-weight: bold">
    Fan Speed: 0%
    <input width="400" type="range" min="0" max="255" @bind="control.defaultFanSpeed" @onclick="() => serial.Write(CommandMethods.BuildFanSpeedCommand(control.defaultFanSpeed))">100%
</p>

<br />
<br />
<div>
    <textarea style="width:100%" readonly rows="10" cols="50">@output</textarea>
</div>
<input style="width:95%" type="text" placeholder="Send G-Code Commands" @bind="control.sendCommand" />
<button @onclick="() => control.SendGcodeViaTerminal(control.sendCommand,serial)">Send</button>

<br />
<br />
<br />
<br />
@code {
    public string output;

    private Timer timer;
    protected override void OnInitialized()
    {
        timer = new Timer(UpdateParagraph, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    private async void UpdateParagraph(object state)
    {
        if (serial.initialized)
        {
            Thread.Sleep(50);
            output += serial.Read();

            await InvokeAsync(StateHasChanged);
        }
    }

    void IDisposable.Dispose()
    {
        timer.Dispose();
    }
}
