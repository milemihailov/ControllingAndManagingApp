@using MachineControlHub.PrinterConnection
@inject Data.PrinterDataService printer
@inject Data.PrinterManagerService PrinterManager
@inject ISnackbar Snackbar

<MudContainer Style="display: flex; justify-content: center; align-items: center;">
    <MudStack Spacing="2" Class="mr-6 pt-2">
        <MudTooltip Text="Connect/Disconnect">
            <MudFab Size="Size.Small" StartIcon="@Icons.Material.Filled.ElectricalServices" Color="Color.Tertiary" OnClick="OnExpandCollapseClick"></MudFab>
        </MudTooltip>
        <MudPopover Open="_expanded">
            <MudPaper>
                <div style="display: flex; gap: 16px; padding: 0px 56px;">
                    <MudSelect T="string" Label="Select Port" @bind-Value="PortName" Immediate="true" Variant="Variant.Text" Style="max-width:160px;">
                        @foreach (var template in Ports)
                        {
                            <MudSelectItem Value=@template />
                        }
                    </MudSelect>
                    <MudSelect T="int" Label="Select Baudrate" @bind-Value="BaudRate" Variant="Variant.Text" Immediate="true" Style="max-width:160px;">
                        <MudSelectItem Value="115200" />
                        <MudSelectItem Value="250000" />
                    </MudSelect>
                    <MudTextField T="string" Label="Printer Name" @bind-Value="PrinterName" Variant="Variant.Text" Immediate="true" Style="max-width:160px;" />
                </div>

                <MudGrid Class="pt-5">
                    @foreach (var bs in PrinterManager.Printers.Values)
                    {
                        ConnectionState = bs.SerialConnection.IsConnected;
                    }
                    <MudItem Class="mr-0 pr-0" xs="12" sm="4" md="4" lg="4">
                        <MudButton Disabled="ConnectionState" FullWidth="true" Variant="Variant.Text" Color="Color.Tertiary" @onclick="() => {ConnectionConfiguration(); OnExpandCollapseClick();}">Connect</MudButton>
                    </MudItem>

                    <MudItem Class="mx-0 px-0" xs="12" sm="4" md="4" lg="4">
                        <MudButton Disabled="!ConnectionState" FullWidth="true" Variant="Variant.Text" Color="Color.Error" @onclick="() => {Disconnect(); OnExpandCollapseClick();}"> Disconnect</MudButton>
                    </MudItem>

                    <MudItem Class="ml-0 pl-0" xs="12" sm="4" md="4" lg="4">
                        <MudButton FullWidth="true" Variant="Variant.Text" Color="Color.Error" @onclick="OnExpandCollapseClick">Hide</MudButton>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudPopover>
    </MudStack>
    <ConnectionStatus />
</MudContainer>


@code {

    private string PortName { get; set; } = "";
    private string PrinterName { get; set; }
    private int BaudRate { get; set; } = 115200;
    private List<string> Ports { get; set; } = new List<string>();
    private bool ConnectionState { get; set; }
    private bool _expanded = false;

    private void OnExpandCollapseClick()
    {
        _expanded = !_expanded;
    }

    protected override void OnInitialized()
    {
        GetPorts();
    }

    public async void ConnectionConfiguration()
    {
        try
        {
            if (PrinterManager.Printers.ContainsKey(PortName))
            {
                PrinterManager.Printers.Remove(PortName);
            }

            PrinterManager.AddPrinter(PortName, BaudRate, PrinterName);

            if (PrinterName == null)
            {
                PrinterName = PortName;
            }

            Snackbar.Add($"Printer {PrinterName} connected", Severity.Success);

            await Task.Delay(1000);

            PrinterManager.SelectPrinter(PortName);

            PrinterManager.ActivePrinter.SerialConnection.Write("M401 S1");

            //set the host keep alive command to 1 second after connection
            PrinterManager.ActivePrinter.SerialConnection.Write("M113 S1");

            //ask for bed volume
            PrinterManager.ActivePrinter.SerialConnection.Write("M211");

            //report SD status every 2 seconds
            PrinterManager.ActivePrinter.SerialConnection.Write("M27 S2");

            //report temperature every 1 seconds
            PrinterManager.ActivePrinter.SerialConnection.Write("M155 S1");

            //report current position every 1 seconds
            PrinterManager.ActivePrinter.SerialConnection.Write("M154 S1");
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    public void Disconnect()
    {
        PrinterManager.Printers[PortName].SerialConnection.Disconnect();
        PrinterManager.Printers.Remove(PortName);
        Console.WriteLine($"Disconecting port {PortName}");
        ConnectionState = !ConnectionState;
    }

    public void GetPorts()
    {
        if (PrinterManager.PrinterSerialConnection != null)
        {
            var availablePorts = PrinterManager.PrinterSerialConnection.AvailableConnections();

            foreach (var port in availablePorts)
            {
                if (!Ports.Contains(port))
                    Ports.Add(port);
            }

            if (Ports.Any())
            {

                PortName = Ports.First();
            }
        }
    }
}