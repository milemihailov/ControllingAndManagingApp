@page "/print"
@page "/"
@inject PrintingService PrintManager
@inject PrinterDataService PrinterDataHandler
@inject NavigationManager MyNavigationManager
@inject HotendTemperatureService HotendTemperatureService
@inject BackgroundTimer background
@inject PortConnectionManagerService PortManager
@inject PrinterManagerService printerManager
@inject Data.BedLevelingService levelBed

@inject IDialogService DialogService
@inject ISnackbar Snackbar

@implements IDisposable

@using MachineControlHub.Temps
@using System.Globalization
@using Plotly.Blazor.Interop
@using Plotly.Blazor.LayoutLib
@using MachineControlHub.Motion;
@using MachineControlHub.Print;
@using System.Text
@using System.Diagnostics

<PrinterState />

<MudGrid Style="width:100%;" Class="pr-0 mr-0">

    <!-- Print Controls and Progress ------------------------------------------------->
    <MudItem Style="width:100%;" xs="12" sm="12" md="12" lg="5" Class="pl-6 mr-0 pr-0 pt-10">

        <!-- Container for controlling print operations -->
        <ContainerSpaceBetween>
            <!-- Button to start printing -->
            @if (PrintManager.isPrinting)
            {
                <MudButton Disabled="true" FullWidth="true" Variant="Variant.Text" Color="Color.Tertiary" @onclick="ConfirmStartAsync">Start</MudButton>
            }
            else
            {
                <MudButton FullWidth="true" Variant="Variant.Text" Color="Color.Tertiary" @onclick="ConfirmStartAsync">Start</MudButton>

            }
            <!-- Button to pause printing -->
            <MudButton FullWidth="true" Variant="Variant.Text" Color="Color.Tertiary" @onclick="PrintManager.PausePrint">Pause</MudButton>
            <!-- Button to resume printing -->
            <MudButton FullWidth="true" Variant="Variant.Text" Color="Color.Tertiary" @onclick="PrintManager.ResumePrint">Resume</MudButton>
            <!-- Button to stop printing -->
            <MudButton FullWidth="true" Variant="Variant.Text" Color="Color.Tertiary" @onclick="() => StopPrint()">Stop</MudButton>
        </ContainerSpaceBetween>

        <MudDivider Class="pt-5" />

        <!-- Grid for file upload and display -->
        <MudGrid Justify="Justify.SpaceAround">
            <MudItem xs="12" md="4" lg="4" Class="pr-0 pl-5">
                <MudFileUpload T="IBrowserFile" OnFilesChanged="LoadFiles" Accept=".gcode,.gco,.txt">
                    <!--Upload button-->
                    <ButtonTemplate>
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload"
                                   for="@context.Id">
                            Upload Files
                        </MudButton>
                    </ButtonTemplate>
                </MudFileUpload>
            </MudItem>

            <!-- MudExpansionPanel for displaying uploaded files -->
            <MudItem xs="12" md="8" lg="8">
                <MudExpansionPanel Text="Uploaded Files">
                    @foreach (var file in PrintManager.uploadedFiles)
                    {
                        <MudListItem>
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <!-- Displaying file name -->
                                <MudText Typo="Typo.subtitle2">@file.FileName</MudText>
                                <!-- Displaying file size -->
                                <MudText Typo="Typo.overline">@Math.Round(PrintManager.printJob.ConvertToMB(@file.FileSize), 2)MB</MudText>
                                <!-- Progress indicator -->
                                <MudProgressCircular Color="Color.Default" Indeterminate=@PrintManager.isTransferring />
                                <!-- Button to start adding file to media -->
                                <MudButton OnClick="() => PrintManager.WriteFileToPort(PrintManager.chosenPort,file.FileName)">Add to media</MudButton>
                            </div>
                        </MudListItem>
                    }
                </MudExpansionPanel>
            </MudItem>
        </MudGrid>

        <!-- Grid for media control buttons -->
        <MudGrid Justify="Justify.SpaceAround">
            <MudItem xs="6" lg="6" Class="px-0">
                <!-- Button to release media -->
                <MudButton FullWidth="true" Variant="Variant.Text" Color="Color.Tertiary" OnClick="PrintManager.ReleaseMedia">Release Media</MudButton>
            </MudItem>
            <MudItem xs="6" lg="6" Class="px-0">
                <!-- Button to attach media -->
                <MudButton FullWidth="true" Variant="Variant.Text" Color="Color.Tertiary" OnClick="PrintManager.AttachMedia">Attach Media</MudButton>
            </MudItem>
        </MudGrid>

        <!-- Select dropdown for choosing media -->
        @if (PrintManager.PortsAvailable != null)
        {
            <MudSelect Label="Select Media" T="string" @bind-Value="PrintManager.chosenPort" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                @foreach (var port in PrintManager.PortsAvailable)
                {
                    <MudSelectItem Value="@port.DriveName">
                        <div style="display: flex; justify-content: space-between;">
                            <MudText> @port.DriveName @port.VolumeLabel </MudText>
                            @if (PrintManager.chosenPort == port.DriveName)
                            {
                                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                            }
                        </div>
                    </MudSelectItem>
                }
            </MudSelect>
        }

        @if (PortManager.ActiveConnection.ConnectionServiceSerial.IsConnected)
        {
            <MudSelect @bind-Value="@PrintManager.fileToPrint" T="string" Label="SD Files" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">

                @if (PrintManager.SDFiles != null)
                {
                    @foreach (var file in PrintManager.SDFiles)
                    {
                        <MudSelectItem Value="@file.FileName">
                            <div style="display: flex; justify-content: space-around;">
                                <span>@file.FileName</span>
                                <span>@($"{Math.Round(PrintManager.printJob.ConvertToMB(double.Parse(file.FileSize)), 2)}MB")</span>
                            </div>
                        </MudSelectItem>
                    }
                }
            </MudSelect>
        }



        <!-- Displaying print details -->
        <div>
            <ContainerSpaceBetween Class="pt-8">
                <MudText>File printing:</MudText>
                <MudText><strong>@PrintManager.printJob.FileName</strong></MudText>
            </ContainerSpaceBetween>
            <ContainerSpaceBetween>
                <MudText>Estimated print time left:</MudText>
                <MudText>@PrintManager.estimatedTime</MudText>
            </ContainerSpaceBetween>
            <ContainerSpaceBetween>
                <MudText>Elapsed print time:</MudText>
                <MudText>
                    @background.stopwatch.Elapsed.ToString("hh\\:mm\\:ss")
                </MudText>
            </ContainerSpaceBetween>
            <ContainerSpaceBetween>
                <MudText>Start time:</MudText>
                <MudText><strong>@PrintManager.printJob.FormattedStartTime</strong></MudText>
            </ContainerSpaceBetween>

            <ContainerSpaceBetween>
                <MudText>File Size:</MudText>
                <MudText><strong>@Math.Round(PrintManager.printJob.ConvertToMB(PrintManager.printJob.FileSize), 2)MB</strong></MudText>
            </ContainerSpaceBetween>
            @if (PrintManager.isPrinting)
            {
                <ContainerSpaceBetween>
                    <MudProgressLinear Color="Color.Warning" Striped="true" Size="Size.Large" Value="PrintManager.progress" Class="pb-9">
                        <MudText Typo="Typo.subtitle1" Color="Color.Surface">
                            <b> @Math.Round((PrintManager.printJob.CurrentBytes / 1024.0 / 1024.0), 2) MB / @Math.Round((PrintManager.printJob.TotalBytes / 1024.0 / 1024.0), 2) MB</b>
                        </MudText>
                    </MudProgressLinear>
                </ContainerSpaceBetween>
            }
        </div>
    </MudItem>

    <!-- Temperatures ---------------------------------------------------------------->
    <MudItem xs="12" sm="12" md="12" lg="7" Class="pt-10 pr-0 mr-0 pl-8" Style="width:100%;">
        <!-- Container for controlling temperature settings -->
        <MudGrid>
            <MudItem xs="12" sm="12" md="12" lg="12">
                <!-- Grid for displaying hotend temperature settings -->
                <MudGrid Class="pb-6">
                    <MudItem xs="12" sm="12" md="6" Style="align-content:space-around;">
                        <!-- Container with text for current hotend temperature -->
                        <ContainerSpaceBetween Class="pt-0 mt-0">
                            <MudText>Current Hotend Temperature:</MudText>
                            <MudText Style="display:flex; align-items:center;">
                                @if (HotendTemperatureService.currentHotendTemperature < HotendTemperatureService.targetHotendTemperature)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.LocalFireDepartment"
                                             Size="Size.Large"
                                             Color="@(_isPrimaryColor ? Color.Warning : Color.Default)"
                                             Class="pr-2 mr-2" />
                                }
                                @HotendTemperatureService.currentHotendTemperature
                            </MudText>
                            <MudText>
                                @if (printerManager.Printers != null && printerManager.Printers.Count > 0)
                                {
                                    @printerManager.ActivePrinter.HotendTemperatures.CurrentTemp
                                }
                            </MudText>
                        </ContainerSpaceBetween>
                        <!-- Container with text for target hotend temperature -->
                        <ContainerSpaceBetween Class="pt-2 mt-2">
                            <MudText>Target Hotend Temperature:</MudText>
                            <MudText>@HotendTemperatureService.targetHotendTemperature</MudText>
                        </ContainerSpaceBetween>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="6">
                        <MudGrid Style="align-items: center;">
                            <!-- MudNumericField for setting hotend temperature -->
                            <MudItem xs="12" sm="6" md="12">
                                <MudNumericField @bind-Value="HotendTemperatureService.setHotendTemperature" Label="Set Hotend Temperature" Immediate="true" Variant="Variant.Text" Min="0" HideSpinButtons="true" />
                            </MudItem>
                            <MudItem xs="12" sm="6" md="12" Class="my-0 py-0">
                                <ContainerSpaceBetween Class="ma-0 pa-0">
                                    <!-- Button to set hotend temperature -->
                                    <MudButton FullWidth="true" Size="Size.Small" Variant="Variant.Text" Color="Color.Tertiary" @onclick="() => HotendTemperatureService.SetHotendTemperature(HotendTemperatureService.setHotendTemperature)">Set Temperature</MudButton>
                                    <!-- Button to turn off hotend temperature -->
                                    <MudButton FullWidth="true" Size="Size.Small" Variant="Variant.Text" Color="Color.Error" @onclick="() => HotendTemperatureService.SetHotendTemperature(0)">Turn Off</MudButton>
                                </ContainerSpaceBetween>
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                    <MudDivider />
                </MudGrid>
                <!-- Grid for displaying bed temperature settings -->
                <MudGrid Class="pb-6">
                    <MudItem xs="12" sm="12" md="6" Style="align-content:space-around;">
                        <!-- Container with text for current bed temperature -->
                        <ContainerSpaceBetween Class="pt-0 mt-0">
                            <MudText>Current Bed Temperature:</MudText>
                            <MudText Style="display:flex; align-items:center;">
                                @if (PrinterDataHandler.BedTemperatureService.currentBedTemperature < PrinterDataHandler.BedTemperatureService.targetBedTemperature)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.LocalFireDepartment"
                                             Size="Size.Large"
                                             Color="@(_isPrimaryColor ? Color.Warning : Color.Default)"
                                             Class="pr-2 mr-2" />
                                }
                                @PrinterDataHandler.BedTemperatureService.currentBedTemperature
                            </MudText>
                        </ContainerSpaceBetween>
                        <!-- Container with text for target bed temperature -->
                        <ContainerSpaceBetween Class="pt-2 mt-2">
                            <MudText>Target Bed Temperature:</MudText>
                            <MudText>@PrinterDataHandler.BedTemperatureService.targetBedTemperature</MudText>
                        </ContainerSpaceBetween>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="6">
                        <MudGrid Style="align-items: center;">
                            <MudItem xs="12" sm="6" md="12">
                                <!-- MudNumericField for setting bed temperature -->
                                <MudNumericField @bind-Value="PrinterDataHandler.BedTemperatureService.setBedTemperature" Label="Set Bed Temperature" Variant="Variant.Text" Min="0" HideSpinButtons="true" />
                            </MudItem>
                            <MudItem xs="12" sm="6" md="12" Class="my-0 py-0">
                                <ContainerSpaceBetween Class="ma-0 pa-0">
                                    <!-- Button to set bed temperature -->
                                    <MudButton FullWidth="true" Size="Size.Small" Variant="Variant.Text" Color="Color.Tertiary" @onclick="() => PrinterDataHandler.BedTemperatureService.SetBedTemperature(PrinterDataHandler.BedTemperatureService.setBedTemperature)">Set Temperature</MudButton>
                                    <!-- Button to turn off bed temperature -->
                                    <MudButton FullWidth="true" Size="Size.Small" Variant="Variant.Text" Color="Color.Error" @onclick="() => PrinterDataHandler.BedTemperatureService.SetBedTemperature(0)">Turn Off</MudButton>
                                </ContainerSpaceBetween>
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                    <MudDivider />
                </MudGrid>
                <!-- Grid for displaying chamber temperature settings -->
                <MudGrid Class="pb-6">
                    <MudItem xs="12" sm="12" md="6" Style="align-content:space-around;">
                        <!-- Container with text for current chamber temperature -->
                        <ContainerSpaceBetween Class="pt-0 mt-0">
                            <MudText>Current Chamber Temperature:</MudText>
                            <MudText Style="display:flex; align-items:center;">
                                @if (PrinterDataHandler.ChamberTemperatureService.currentChamberTemperature < PrinterDataHandler.ChamberTemperatureService.targetChamberTemperature)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.LocalFireDepartment"
                                             Size="Size.Large"
                                             Color="@(_isPrimaryColor ? Color.Warning : Color.Default)"
                                             Class="pr-2 mr-2" />
                                }
                                @PrinterDataHandler.ChamberTemperatureService.currentChamberTemperature
                            </MudText>
                        </ContainerSpaceBetween>
                        <!-- Container with text for target chamber temperature -->
                        <ContainerSpaceBetween Class="pt-2 mt-2">
                            <MudText>Target Chamber Temperature:</MudText>
                            <MudText>@PrinterDataHandler.ChamberTemperatureService.targetChamberTemperature</MudText>
                        </ContainerSpaceBetween>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="6">
                        <MudGrid Style="align-items: center;">
                            <MudItem xs="12" sm="6" md="12">
                                <!-- MudNumericField for setting chamber temperature -->
                                <MudNumericField @bind-Value="PrinterDataHandler.ChamberTemperatureService.setChamberTemperature" Label="Set Chamber Temperature" Variant="Variant.Text" Min="0" HideSpinButtons="true" />
                            </MudItem>
                            <MudItem xs="12" sm="6" md="12" Class="my-0 py-0">
                                <ContainerSpaceBetween Class="ma-0 pa-0">
                                    <!-- Button to set chamber temperature -->
                                    <MudButton FullWidth="true" Size="Size.Small" Variant="Variant.Text" Color="Color.Tertiary" @onclick="() => PrinterDataHandler.ChamberTemperatureService.SetChamberTemperature(PrinterDataHandler.ChamberTemperatureService.setChamberTemperature)">Set Temperature</MudButton>
                                    <!-- Button to turn off chamber temperature -->
                                    <MudButton FullWidth="true" Size="Size.Small" Variant="Variant.Text" Color="Color.Error" @onclick="() => PrinterDataHandler.ChamberTemperatureService.SetChamberTemperature(0)">Turn Off</MudButton>
                                </ContainerSpaceBetween>
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                    <MudDivider />
                </MudGrid>
                <!-- Buttons for filament operations -->
                <MudGrid>
                    <!-- Button to change filament -->
                    <MudItem Class="mr-0 pr-0" xs="12" sm="4" md="4" lg="4">
                        <MudButton FullWidth="true" Variant="Variant.Text" Color="Color.Tertiary" @onclick="() => HotendTemperatureService.ChangeFilament()">Change Filament</MudButton>
                    </MudItem>
                    <!-- Button to load filament -->
                    <MudItem Class="mx-0 px-0" xs="12" sm="4" md="4" lg="4">
                        <MudButton FullWidth="true" Variant="Variant.Text" Color="Color.Tertiary" @onclick="() => HotendTemperatureService.LoadFilament()">Load Filament</MudButton>
                    </MudItem>
                    <!-- Button to unload filament -->
                    <MudItem Class="ml-0 pl-0" xs="12" sm="4" md="4" lg="4">
                        <MudButton FullWidth="true" Variant="Variant.Text" Color="Color.Tertiary" @onclick="() => HotendTemperatureService.UnloadFilament()">Unload Filament</MudButton>
                    </MudItem>
                </MudGrid>

                <!-- Preheating Profiles -------------------------------------------------------------->
                <MudCarousel Class="mud-width-full" Style="height:200px;" TData="object" AutoCycle="true" AutoCycleTime="TimeSpan.FromSeconds(5)" EnableSwipeGesture="true" Elevation="1">
                    @foreach (var profile in PrinterDataHandler.preheatingProfiles)
                    {
                        <!-- MudCarouselItem to display a preheating profile -->
                        <MudCarouselItem Transition="MudBlazor.Transition.Slide" Color="@Color.Surface">
                            <!-- Displaying the name of the material -->
                            <MudText Typo="Typo.h4" Style="display: flex; justify-content: center;">@profile.MaterialName</MudText>

                            <!-- Div for displaying the hotend temperature, bed temperature, and fan speed -->
                            <div class="d-flex pt-4 pr-16 pl-16" Style="display: flex; justify-content: space-around; align-items: center;">
                                <!-- Hotend temperature -->
                                <MudText Typo="Typo.overline"><b>Hotend:</b> @(profile.HotendTemp)°C</MudText>
                                <!-- Bed temperature -->
                                <MudText Typo="Typo.overline"><b>Bed</b>: @(profile.BedTemp)°C</MudText>
                                <!-- Fan speed -->
                                <MudText Typo="Typo.overline"><b>Fan Speed:</b> @(profile.FanSpeed)%</MudText>
                            </div>

                            <!-- Div for preheat and delete buttons -->
                            <div Style="display: flex; justify-content: center;" class="pt-2">
                                <!-- Button to start preheating -->
                                @* <MudButton Class="mr-5 px-5" Variant="Variant.Text" Color="Color.Tertiary" OnClick="() => printer.StartPreheating(profile)">Preheat</MudButton> *@
                                <MudIconButton Icon="@Icons.Material.Filled.LocalFireDepartment"
                                               Size="Size.Medium"
                                               Variant="Variant.Text"
                                               Color="Color.Warning"
                                               OnClick="() => PrinterDataHandler.StartPreheating(profile)" />
                                <!-- Button to delete preheating profile -->
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Text" Color="Color.Error" OnClick="() => PrinterDataHandler.DeletePreheatingProfile(profile)" />
                            </div>
                        </MudCarouselItem>
                    }
                </MudCarousel>
            </MudItem>
        </MudGrid>
    </MudItem>

    <!-- Bed Leveling ---------------------------------------------------------------->
    <MudItem xs="12" md="6" Class="pa-0">
        <!-- Main grid container for the plotly chart and button -->
        <MudGrid Class="pl-6">
            <!-- Grid item containing the Plotly chart -->
            <MudItem xs="12" sm="12" md="12" lg="12" Class="pb-0 mb-0">
                <PlotlyChart style="height: 60vh; min-height: 350px" @bind-Config="config" @bind-Layout="layout" @bind-Data="data" @ref="chart" />
            </MudItem>
            <!-- Grid item containing the Calibrate Bed button -->
            <MudItem xs="12" sm="12" md="12" lg="12" Class="pt-0 mt-0">
                <!-- Check if printing is not in progress -->
                @if (!PrintManager.isPrinting)
                {
                    <!-- Button to initiate bed calibration -->
                    <MudButton FullWidth="true" Disabled="@PrintManager.processing" OnClick="PrintManager.CalibrateBed" Variant="Variant.Filled" Color="Color.Tertiary">
                        <!-- Show a progress indicator and text when processing -->
                        @if (PrintManager.processing)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Measuring Bed</MudText>
                        }
                        else
                        {
                            <MudText>CALIBRATE BED</MudText>
                        }
                    </MudButton>
                }
            </MudItem>
        </MudGrid>
    </MudItem>

    <!-- Temperature Graph ----------------------------------------------------------->
    <MudItem xs="12" md="6" Class="pa-0 mr-0">
        <!-- Centering div for the MudChart component -->
        <div style="display: flex; justify-content: center; align-items: center; height: 100%;">
            <!-- MudChart component displaying a line chart -->
            <MudChart ChartType="ChartType.Line"
                      ChartSeries="@PrintManager.Series"
                      @bind-SelectedIndex="PrintManager.Index"
                      XAxisLabels="@PrintManager.XAxisLabels"
                      Width="100%"
                      Height="350px"
                      ChartOptions="PrintManager.Options" />
        </div>
    </MudItem>
</MudGrid>

@code {

    private PlotlyChart chart;
    private Config config;
    private Layout layout;
    private IList<ITrace> data;
    string fileMessage = "";
    string sdFiles = "";
    string calibrateMessage = "";
    bool _isPrimaryColor = true;

    /// <summary>
    /// Method that is called when the component is initialized.
    /// Sets up event handlers, initializes configuration, layout, and loads printer data.
    /// </summary>
    protected async override Task OnInitializedAsync()
    {
        // Subscribe to the background service events
        background.SecondElapsed += OnSecondElapsed;
        PortManager.SelectedPrinterChanged += OnSelectedPrinter;

        await Task.Run(() =>
        {
            // Initialize the data list
            data = new List<ITrace>();

            // // Check if the serial connection is established and request SD card list if connected
            // if (printerManager.ActivePrinter.SerialConnection.IsConnected && printerManager.Printers.Count > 0)
            // {
            //     printerManager.ActivePrinter.SerialConnection.Write(CommandMethods.BuildListSDCardCommand());

            //     // Subscribe to the InputReceived event of the selected printer
            //     foreach (var port in printerManager.Printers.Values)
            //     {
            //         printerManager.InputReceived += OnUpdate;
            //     }
            // }

            if (printerManager.Printers != null && printerManager.Printers.Count > 0)
            {
                printerManager.ActivePrinter.SerialConnection.Write(CommandMethods.BuildListSDCardCommand());

                printerManager.InputReceived += OnUpdate;
            }

            // Initialize the configuration for Plotly chart
            config = new Config
                {
                    ShowLink = false,
                    Responsive = true,
                    DisplayLogo = true
                };

            // Initialize the layout for Plotly chart
            layout = new Layout
                {
                    Title = new Title
                    {
                        Text = "Bed Mesh"
                    },
                    PaperBgColor = "white",
                    PlotBgColor = "white",
                    Font = new Font
                    {
                        Color = "black"
                    },
                    Margin = new Plotly.Blazor.LayoutLib.Margin
                    {
                        L = 65,
                        R = 50,
                        B = 65,
                        T = 90
                    }
                };
        });
        // Load preheating profiles from the specified path
        PrinterDataHandler.preheatingProfiles = PrinterDataHandler.LoadPrinterDataList<MachineControlHub.Material.PreheatingProfiles>(Data.PrinterDataService.PREHEATING_PROFILES_PATH);

        // Load the selected printer settings from the specified path
        PrinterDataHandler.SelectedPrinter = PrinterDataHandler.LoadPrinterData<MachineControlHub.Printer>(Data.PrinterDataService.SELECTED_PRINTER_SETTINGS_PATH);

        // Load the bed mesh CSV data from the specified path
        PrinterDataHandler.BedLevelDataService.CSVData = PrinterDataHandler.LoadPrinterData<string>("meshData.json");

        // Load Plotly data if available
        LoadPlotlyData();

    }

    /// <summary>
    /// Refreshes the component state when toggling between printers.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    private async void OnSelectedPrinter(object sender, EventArgs e)
    {
        try
        {
            await InvokeAsync(() => MyNavigationManager.NavigateTo(MyNavigationManager.Uri, true));
        }
        catch (NavigationException navEx)
        {
            Console.WriteLine($"Navigation error: {navEx.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected error: {ex.Message}");
        }
    }

    /// <summary>
    /// Handles updates from the printer.
    /// </summary>
    /// <param name="message">The message received from the printer.</param>
    public async void OnUpdate(string message)
    {
        if (printerManager.ActivePrinter.SerialConnection.IsConnected && printerManager.Printers.Count > 0)
        {
            // get the list of files on the SD card
            fileMessage += message;
            if (message.Contains("End"))
            {
                sdFiles = string.Join("\n", fileMessage.Split('\n').Where(line => !string.IsNullOrWhiteSpace(line)));
                PrintManager.ListSDFiles(sdFiles);
                fileMessage = "";
            }

            // update elapsed print time
            // print.ElapsedPrintTime(message);

            // get the bed leveling data
            if (fileMessage.Contains("Bilinear"))
            {
                calibrateMessage += message;
                if (message.Contains("X:"))
                {
                    PrinterDataHandler.BedLevelDataService.CSVData = "";
                    PrinterDataHandler.BedLevelDataService.CSVData = PrinterDataHandler.BedLevelDataService.bedData.GetGrid(calibrateMessage);
                    PrinterDataHandler.BedLevelDataService.meshData = PrinterDataHandler.BedLevelDataService.GetSurfaceData();
                    PrintManager.processing = false;
                    fileMessage = "";
                    calibrateMessage = "";

                    // delete previous bed leveling data if it exists
                    if (File.Exists("meshData.json"))
                    {
                        File.Delete("meshData.json");
                    }
                    // save the new bed leveling data
                    PrinterDataHandler.SavePrinterData("meshData.json", PrinterDataHandler.BedLevelDataService.CSVData);
                    LoadPlotlyData();
                    await InvokeAsync(() => MyNavigationManager.NavigateTo(MyNavigationManager.Uri, true));
                }
            }

            PrintManager.GetPrintingFileName(message);

            // parse the current hotend and bed temperatures
            await HotendTemperatureService.ParseCurrentHotendTemperature(message);
            await PrinterDataHandler.BedTemperatureService.ParseCurrentBedTemperature(message);

            // Ensure the graph data does not exceed 30 entries by removing the oldest entries
            if (PrintingService.hotendGraph.Count >= 30)
            {
                PrintingService.hotendGraph.RemoveAt(0);
                PrintingService.bedGraph.RemoveAt(0);
            }

            // Add the current temperature data to the graph
            PrintingService.hotendGraph.Add(PrinterDataHandler.HotendTemperatureService.currentHotendTemperature);
            PrintingService.bedGraph.Add(PrinterDataHandler.BedTemperatureService.currentBedTemperature);

            // Update the graph data with the latest values
            PrintManager.UpdateGraphData();

            await PromptHandler(message);
            await InvokeAsync(StateHasChanged);
        }
    }

    /// <summary>
    /// This method is called every second to update temperature data and print status.
    /// </summary>
    private void OnSecondElapsed()
    {
        if (!PortManager.IsBusy)
        {
            Task.Run(async () =>
            {
                // If automatic temperature reporting is not enabled, request temperature data
                if (!PrinterDataHandler.ActivePrinter.HasAutoReportTemperature)
                {
                    PortManager.connections[PortManager.SelectedPrinter].ConnectionServiceSerial.Write(CommandMethods.BuildReportTemperaturesCommand());
                    Console.WriteLine("reporting");
                }

                // Asynchronously get the status of the drives
                await Task.Run(() => PrintManager.GetDrives());

                // If printing is in progress, request print time elapsed
                if (PrintManager.isPrinting)
                {
                    await PrintManager.DisplayEstimatedTimeRemaining();
                    PortManager.connections[PortManager.SelectedPrinter].ConnectionServiceSerial.Write("M27 C");
                }

                await InvokeAsync(StateHasChanged);
            });
        }
        _isPrimaryColor = !_isPrimaryColor; // Toggle the color state

    }

    /// <summary>
    /// Handles the loading of files from an input event.
    /// </summary>
    /// <param name="e">The event arguments containing information about the file input change.</param>
    /// <returns>A task representing the asynchronous file loading operation.</returns>
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        // Read the file's content into the print.file variable
        PrintManager.file = await new StreamReader(e.File.OpenReadStream(Data.PrintingService.MAX_FILE_SIZE)).ReadToEndAsync();

        // Get the file name and size from the event arguments
        var fileName = e.File.Name;
        var fileSize = e.File.Size;

        // Add the file's information to the list of uploaded files
        PrintManager.uploadedFiles.Add((fileName, PrintManager.file, fileSize));

        // Extract the printing settings from the file
        // print.ExtractPrintingSettings(print.file);
        StateHasChanged();
    }

    /// <summary>
    /// Loads Plotly data for the bed leveling mesh if CSV data is available.
    /// </summary>
    private void LoadPlotlyData()
    {
        try
        {
            // Check if there is CSV data to process
            if (PrinterDataHandler.BedLevelDataService.CSVData != null)
            {
                // Get the surface data from the CSV
                PrinterDataHandler.BedLevelDataService.meshData = PrinterDataHandler.BedLevelDataService.GetSurfaceData();

                Task.Run(async () =>
                {
                    // Iterate over each trace in the mesh data
                    foreach (var trace in await PrinterDataHandler.BedLevelDataService.meshData)
                    {
                        // Add the trace to the chart asynchronously and delay briefly between each addition
                        await InvokeAsync(async () => await chart.AddTrace(trace));
                        await Task.Delay(100);
                    }

                    PrinterDataHandler.BedLevelDataService._isInitialized = true;
                });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    public async Task ConfirmStartAsync()
    {
        if (PortManager.ActiveConnection.ConnectionServiceSerial.IsConnected)
        {
            bool? result = await DialogService.ShowMessageBox(
            "Start Print",
            "Do you want to start a print job?",
            yesText: "Start!", cancelText: "Cancel");

            if (result == true)
            {
                if (PrintManager.fileToPrint == "")
                {
                    Snackbar.Add("No file selected", Severity.Error);
                }
                else
                {
                    PrintManager.StartPrint(PrintManager.fileToPrint);
                    PrintManager.StartTimeOfPrint();
                    PrintManager.background.ResetStopwatch();
                    PrintManager.background.StartStopwatch();
                    PrintManager.GetFileNameAndSize(PrintManager.fileToPrint);
                    PrintManager.finalizationExecuted = false; // Reset the flag
                    Snackbar.Add($"<ul><li>Print Started</li> <li> File Printing: {PrintManager.fileToPrint} </li></ul>", Severity.Success);
                }
            }
        }
        else
        {
            Snackbar.Add("Printer is not connected", Severity.Error);
            return;
        }
    }

    public async Task StopPrint()
    {
        if (PortManager.ActiveConnection.ConnectionServiceSerial.IsConnected)
        {
            bool? result = await DialogService.ShowMessageBox(
            "Stop Print",
            "Do you want to stop the print?",
            yesText: "Stop!", cancelText: "Cancel");

            if (result == true && PrintManager.isPrinting)
            {
                PrintManager.printService.AbortCurrentPrint();
                PrintManager.background.StopStopwatch();
                PrintManager.progress = 0;
                PrintManager.FormatTotalPrintTime();
                PrintManager.isPrinting = false;
                PrintManager._printerDataServiceTest.AddPrintJobToHistory(PrintManager.printJob, PortManager.ActiveConnection);

                PrintManager._snackbar.Add("Print Stopped", Severity.Error);
            }
            else
            {
                Snackbar.Add("Not Printing", Severity.Error);
                return;
            }
        }
        else
        {
            Snackbar.Add("Printer is not connected", Severity.Error);
            return;
        }
    }

    public async Task PromptHandler(string message)
    {
        await InvokeAsync(async () =>
        {
            if (message.Contains("Insert filament"))
            {
                bool? result = await PrintManager._dialogService.ShowMessageBox(
                "Filament Change",
                "Insert filament and click continue!",
                yesText: "Continue");

                if (result == true)
                {
                    PortManager.connections[PortManager.SelectedPrinter].ConnectionServiceSerial.Write("M876 S1");
                }
            }

            if (message.Contains("action:prompt_begin Heater Timeout"))
            {
                bool? result = await PrintManager._dialogService.ShowMessageBox(
                "Filament Change",
                "Heater timeout reheat to continue!",
                yesText: "Reheat");

                if (result == true)
                {
                    PortManager.connections[PortManager.SelectedPrinter].ConnectionServiceSerial.Write("M876 S1");
                }
            }

            if (message.Contains("action:prompt_begin Reheat Done"))
            {
                bool? result = await PrintManager._dialogService.ShowMessageBox(
                "Filament Change",
                "Reheat done add new filament and click continue!",
                yesText: "Change");

                if (result == true)
                {
                    PortManager.connections[PortManager.SelectedPrinter].ConnectionServiceSerial.Write("M876 S1");
                }
            }

            if (message.Contains("action:prompt_button PurgeMore"))
            {
                bool? result = await PrintManager._dialogService.ShowMessageBox(
                "Filament Change",
                "Purge more or continue!",
                yesText: "Continue", noText: "Purge More");

                if (result == true)
                {
                    PortManager.connections[PortManager.SelectedPrinter].ConnectionServiceSerial.Write("M876 S1");
                }
                else
                {
                    PortManager.connections[PortManager.SelectedPrinter].ConnectionServiceSerial.Write("M876 S0");
                    PrintManager._snackbar.Add("Purging", Severity.Info);
                }
            }
        });
    }

    public void Dispose()
    {
        printerManager.InputReceived -= OnUpdate;
        background.SecondElapsed -= OnSecondElapsed;

        PortManager.SelectedPrinterChanged -= OnSelectedPrinter;
    }
}