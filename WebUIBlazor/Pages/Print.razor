@page "/print"
@inject Data.PrintingService print
@inject Data.BedLevelingService levelBed
@inject NavigationManager MyNavigationManager
@inject Data.HotendTemperatureService hotend
@inject Data.BedTemperatureService bed
@inject Data.ChamberTemperatureService chamber
@inject Data.BackgroundTimer background
@inject Data.PrinterDataServiceTest printer
@inject ISnackbar Snackbar

@implements IDisposable
@using MachineControlHub.Temps
@using System.Globalization
@using Plotly.Blazor.Interop
@using Plotly.Blazor.LayoutLib
@using MachineControlHub.Motion;
@using MachineControlHub.Print;
@using System.Text

<ConnectionStatus SelectedPrinter="@printer.SelectedPrinter.Name" Connection="background.ConnectionServiceSerial.printerConnection.IsConnected" />
<PrinterState />

@if (printer.SelectedPrinter != null)
{
    <MudGrid>
        <MudItem xs="12" sm="12" md="12" lg="3" Class="mx-0 px-0 mb-0 pb-0">
            <MudPaper Class="pa-4 px-8" Outlined="true">
                <MudCardContent>
                    <ContainerSpaceBetween>
                        <MudButton OnClick="print.ConfirmStartAsync">Start</MudButton>
                        <MudButton @onclick="print.PausePrint">Pause</MudButton>
                        <MudButton @onclick="print.ResumePrint">Resume</MudButton>
                        <MudButton @onclick="print.StopPrint">Stop</MudButton>
                    </ContainerSpaceBetween>
                    <MudFileUpload T="IBrowserFile" OnFilesChanged="LoadFiles" Accept=".gcode,.gco,.txt">
                        <ButtonTemplate>
                            <MudButton HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload"
                                       for="@context.Id">
                                Upload Files
                            </MudButton>
                        </ButtonTemplate>
                    </MudFileUpload>
                    <MudButton OnClick="ReleaseMedia">Release Media</MudButton>
                    <MudButton OnClick="AttachMedia">Attach Media</MudButton>

                    @if (PortsAvailable != null)
                    {
                        <MudText>Attached Media</MudText>
                        @foreach (var port in PortsAvailable)
                        {
                            <MudListItem>
                                <div style="display: flex; justify-content: space-between;">
                                    <MudText> @port.DriveName @port.VolumeLabel </MudText>
                                    <MudButton Variant="Variant.Text"
                                               Color="@(chosenPort == port.DriveName ? Color.Success : Color.Default)"
                                               OnClick="() => ChoosePort(port.DriveName)"
                                               StartIcon="@(chosenPort == port.DriveName ? Icons.Material.Filled.CheckCircle : null)">
                                        @(chosenPort == port.DriveName ? "Selected" : "Select")
                                    </MudButton>
                                </div>
                            </MudListItem>
                        }
                    }

                    <MudExpansionPanel Text="Uploaded Files">
                        @foreach (var file in print.uploadedFiles)
                        {
                            <MudListItem>
                                <div style="display: flex; justify-content: space-between;">
                                    <MudText Typo="Typo.subtitle2">@file.FileName</MudText>
                                    <MudText Typo="Typo.overline">@Math.Round(print.printProgress.ConvertToMB(@file.FileSize), 2)MB</MudText>
                                    <MudProgressCircular Color="Color.Default" Indeterminate=@isTransferring />
                                    <MudButton OnClick="() => WriteFileToPort(chosenPort,file.FileName)">Add to media</MudButton>

                                </div>
                            </MudListItem>
                        }
                    </MudExpansionPanel>

                    <MudSelect @bind-Value="@print.fileToPrint" T="string" Label="SD Files" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                        @if (background.ConnectionServiceSerial.IsConnected)
                        {
                            @if (print.files != null)
                            {
                                @foreach (var file in print.files)
                                {
                                    <MudSelectItem Value="@file" />
                                }
                            }
                        }
                    </MudSelect>

                    <MudText>File printing: <strong>@print.printName</strong></MudText>
                    <MudText>Estimated print time: @print.estimatedTime</MudText>
                    <MudText>Elapsed print time:  @string.Format($"")</MudText>
                    <MudText>Start time: <strong>@print.printJob.FormattedStartTime</strong></MudText>
                    <MudText>File Size: <strong>@print.fileSize MB</strong></MudText>
                </MudCardContent>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="12" lg="9" Class="px-0 mx-0">
            <MudGrid>
                <MudItem xs="12" md="12" lg="6" Class="pr-0 mr-0">
                    @*                 <MudText>If you have Temperature Auto Report Enabled turn On</MudText>
                <MudSwitch @bind-Value="@print.autoReportTemps" Color="Color.Success" Class="mr-n2 mb-6"> Turn On/Off</MudSwitch>
                @if (print.autoReportTemps)
                {
                <MudNumericField @bind-Value="@print.autoReportValueInterval" Label="Auto Report Temperature Interval" Variant="Variant.Outlined" Min="0" />
                <MudButton FullWidth="true" OnClick="print.SetInterval" Color="Color.Tertiary"> Set Seconds</MudButton>
                } *@
                    <MudPaper Class="pt-4" Outlined="true">
                        <MudGrid>
                            <MudItem md="6" Style="align-content:space-around;">
                                <ContainerSpaceBetween Class="pt-0 mt-0">
                                    <MudText>Current Hotend Temperature:</MudText>
                                    <MudText Color="Color.Success">  @hotend.currentHotendTemperature</MudText>
                                </ContainerSpaceBetween>
                                <ContainerSpaceBetween Class="pt-2 mt-2">
                                    <MudText>Target Hotend Temperature:</MudText>
                                    <MudText Color="Color.Success">@hotend.targetHotendTemperature</MudText>
                                </ContainerSpaceBetween>
                            </MudItem>
                            <MudItem md="6">
                                <MudGrid Style="align-items: center;">
                                    <MudItem xs="6" md="12">
                                        <MudNumericField @bind-Value="hotend.setHotendTemperature" Label="Set Hotend Temperature" Variant="Variant.Text" Min="0" HideSpinButtons="true" />
                                    </MudItem>
                                    <MudItem xs="6" md="12" Class="my-0 py-0">
                                        <ContainerSpaceBetween Class="ma-0 pa-0">
                                            <MudButton FullWidth="true" Size="Size.Small" Variant="Variant.Text" Color="Color.Tertiary" @onclick="() => hotend.SetHotendTemperature(hotend.setHotendTemperature)">Set Temperature</MudButton>
                                            <MudButton FullWidth="true" Size="Size.Small" Variant="Variant.Text" Color="Color.Error" @onclick="() => hotend.SetHotendTemperature(0)">Turn Off</MudButton>
                                        </ContainerSpaceBetween>
                                    </MudItem>
                                </MudGrid>
                            </MudItem>
                        </MudGrid>

                        <MudGrid>
                            <MudItem md="6" Style="align-content:space-around;">
                                <ContainerSpaceBetween Class="pt-0 mt-0">
                                    <MudText>Current Bed Temperature:</MudText>
                                    <MudText>@bed.currentBedTemperature</MudText>
                                </ContainerSpaceBetween>
                                <ContainerSpaceBetween Class="pt-2 mt-2">
                                    <MudText>Target Bed Temperature:</MudText>
                                    <MudText>@bed.targetBedTemperature</MudText>
                                </ContainerSpaceBetween>
                            </MudItem>
                            <MudItem md="6">
                                <MudGrid Style="align-items: center;">
                                    <MudItem xs="6" md="12">
                                        <MudNumericField @bind-Value="bed.setBedTemperature" Label="Set Bed Temperature" Variant="Variant.Text" Min="0" HideSpinButtons="true" />
                                    </MudItem>
                                    <MudItem xs="6" md="12" Class="my-0 py-0">
                                        <ContainerSpaceBetween Class="ma-0 pa-0">
                                            <MudButton FullWidth="true" Size="Size.Small" Variant="Variant.Text" Color="Color.Tertiary" @onclick="() => bed.SetBedTemperature(bed.setBedTemperature)">Set Temperature</MudButton>
                                            <MudButton FullWidth="true" Size="Size.Small" Variant="Variant.Text" Color="Color.Error" @onclick="() => bed.SetBedTemperature(0)">Turn Off</MudButton>
                                        </ContainerSpaceBetween>
                                    </MudItem>
                                </MudGrid>
                            </MudItem>
                        </MudGrid>

                        <MudGrid>
                            <MudItem md="6" Style="align-content:space-around;">
                                <ContainerSpaceBetween Class="pt-0 mt-0">
                                    <MudText>Current Chamber Temperature:</MudText>
                                    <MudText>@chamber.currentChamberTemperature</MudText>
                                </ContainerSpaceBetween>
                                <ContainerSpaceBetween Class="pt-2 mt-2">
                                    <MudText>Target Chamber Temperature:</MudText>
                                    <MudText>@chamber.targetChamberTemperature</MudText>
                                </ContainerSpaceBetween>
                            </MudItem>
                            <MudItem md="6">
                                <MudGrid Style="align-items: center;">
                                    <MudItem xs="6" md="12">
                                        <MudNumericField @bind-Value="chamber.setChamberTemperature" Label="Set Chamber Temperature" Variant="Variant.Text" Min="0" HideSpinButtons="true" />
                                    </MudItem>
                                    <MudItem xs="6" md="12" Class="my-0 py-0">
                                        <ContainerSpaceBetween Class="ma-0 pa-0">
                                            <MudButton FullWidth="true" Size="Size.Small" Variant="Variant.Text" Color="Color.Tertiary" @onclick="() => chamber.SetChamberTemperature(chamber.setChamberTemperature)">Set Temperature</MudButton>
                                            <MudButton FullWidth="true" Size="Size.Small" Variant="Variant.Text" Color="Color.Error" @onclick="() => chamber.SetChamberTemperature(0)">Turn Off</MudButton>
                                        </ContainerSpaceBetween>
                                    </MudItem>
                                </MudGrid>
                            </MudItem>
                        </MudGrid>

                        <ContainerSpaceBetween Class="pt-6">
                            <MudButton FullWidth="true" Variant="Variant.Text" Color="Color.Primary" @onclick="() => hotend.ChangeFilament()">Change Filament</MudButton>
                            <MudButton FullWidth="true" Variant="Variant.Text" Color="Color.Primary" @onclick="() => hotend.LoadFilament()">Load Filament</MudButton>
                            <MudButton FullWidth="true" Variant="Variant.Text" Color="Color.Primary" @onclick="() => hotend.UnloadFilament()">Unload Filament</MudButton>
                        </ContainerSpaceBetween>
                    </MudPaper>

                    @*                     <MudNumericField @bind-Value="hotend.setHotendTemperature" Label="Set Hotend Temperature" Variant="Variant.Outlined" Min="0" HideSpinButtons="true" />
                <MudButton Variant="Variant.Filled" Color="Color.Tertiary" @onclick="() => hotend.SetHotendTemperature(hotend.setHotendTemperature)">Set Hotend Temperature</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="() => hotend.SetHotendTemperature(0)">Turn Hotend Off</MudButton> *@
                    @*                     @if (printer.SelectedPrinter.HasHeatedBed)
                {
                <MudNumericField @bind-Value="bed.setBedTemperature" Label="Set Bed Temperature" Variant="Variant.Outlined" Min="0" HideSpinButtons="true" />
                <MudButton Variant="Variant.Filled" Color="Color.Tertiary" @onclick="() => bed.SetBedTemperature(bed.setBedTemperature)">Set Bed Temperature</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="() => bed.SetBedTemperature(0)">Turn Bed Off</MudButton>
                }
                else
                {
                <MudNumericField Disabled="true" @bind-Value="bed.setBedTemperature" Label="Set Bed Temperature" Variant="Variant.Outlined" Min="0" HideSpinButtons="true" />
                <MudButton Disabled="true" Variant="Variant.Filled" Color="Color.Tertiary" @onclick="() => bed.SetBedTemperature(bed.setBedTemperature)">Set Bed Temperature</MudButton>
                <MudButton Disabled="true" Variant="Variant.Filled" Color="Color.Error" @onclick="() => bed.SetBedTemperature(0)">Turn Bed Off</MudButton>

                } *@
                    @*                     @if (printer.SelectedPrinter.HasChamber)
                {
                <MudNumericField @bind-Value="chamber.setChamberTemperature" Label="Set Chamber Temperature" Variant="Variant.Outlined" Min="0" HideSpinButtons="true" />
                <MudButton Variant="Variant.Filled" Color="Color.Tertiary" @onclick="() => chamber.SetChamberTemperature(chamber.setChamberTemperature)">Set Chamber Temperature</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="() => chamber.SetChamberTemperature(0)">Turn Chamber Off</MudButton>
                }
                else
                {
                <MudNumericField Disabled="true" @bind-Value="chamber.setChamberTemperature" Label="Set Chamber Temperature" Variant="Variant.Outlined" Min="0" HideSpinButtons="true" />
                <MudButton Disabled="true" Variant="Variant.Filled" Color="Color.Tertiary" @onclick="() => chamber.SetChamberTemperature(chamber.setChamberTemperature)">Set Chamber Temperature</MudButton>
                <MudButton Disabled="true" Variant="Variant.Filled" Color="Color.Error" @onclick="() => chamber.SetChamberTemperature(0)">Turn Chamber Off</MudButton>
                } *@

                    @*                     <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => hotend.ChangeFilament()">Change Filament</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => hotend.LoadFilament()">Load Filament</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => hotend.UnloadFilament()">Unload Filament</MudButton> *@
                </MudItem>
                <MudItem xs="12" md="12" lg="6" Class="mx-0 px-0 mb-0 pb-0">
                    <MudPaper Class="pa-4 px-8" Outlined="true">
                        <MudChart ChartType="ChartType.Line" ChartSeries="@print.Series" @bind-SelectedIndex="print.Index" XAxisLabels="@print.XAxisLabels" Width="100%" Height="350px" ChartOptions="print.Options" />
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudPaper Height="100%" Width="100%" Elevation="0">
                <MudCardContent>
                    <PlotlyChart style="height: 60vh; min-height: 350px" @bind-Config="config" @bind-Layout="layout" @bind-Data="data" @ref="chart" />


                    <MudButton FullWidth="true" Disabled="@print._processing" OnClick="print.CalibrateBed" Variant="Variant.Filled" Color="Color.Primary">
                        @if (print._processing)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Measuring Bed</MudText>
                        }
                        else
                        {
                            <MudText>CALIBRATE BED</MudText>
                        }
                    </MudButton>
                </MudCardContent>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" md="6">
            <div>
                @*
            <MudCardHeader Style="display: flex; justify-content: center; text-decoration:underline">
            <MudText Typo="Typo.h6">Preheating Profiles</MudText>
            </MudCardHeader> *@
                <MudCarousel Class="mud-width-full" Style="height:200px;" TData="object" AutoCycle="true" AutoCycleTime="TimeSpan.FromSeconds(10)" EnableSwipeGesture="true" Elevation="1">
                    @foreach (var profile in printer.preheatingProfiles)
                    {
                        <MudCarouselItem Transition="MudBlazor.Transition.Slide" Color="@Color.Surface">
                            <MudText Typo="Typo.h4" Style="display: flex; justify-content: center; ">@profile.MaterialName</MudText>

                            <div class="d-flex pt-4 pr-16 pl-16" Style="display: flex; justify-content: space-around; align-items: center;">
                                <MudText Typo="Typo.overline"><b>Hotend:</b> @(profile.HotendTemp)°C</MudText>
                                <MudText Typo="Typo.overline"><b>Bed</b>: @(profile.BedTemp)°C</MudText>
                                <MudText Typo="Typo.overline"><b>Fan Speed:</b> @(profile.FanSpeed)%</MudText>
                            </div>
                            <div Style="display: flex; justify-content: center;" class="pt-2">

                                <MudButton Class="mr-5" Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" OnClick="() => printer.StartPreheating(profile)">Preheat</MudButton>
                                <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Error" OnClick="() => printer.DeletePreheatingProfile(profile)">Delete</MudButton>
                            </div>
                        </MudCarouselItem>
                    }
                </MudCarousel>
            </div>
        </MudItem>
        @* <MudItem xs="4">
    <MudCardHeader>
    <MudText Typo="Typo.h6">HOTEND PID Autotune and Store To Printer</MudText>
    </MudCardHeader>
    <MudCard>
    <MudNumericField @bind-Value="hotend.PIDHotendTemp" Label="Set Temperature" Variant="Variant.Outlined" Min="0" HideSpinButtons="true" />
    <MudNumericField @bind-Value="hotend.PIDHotendCycles" Label="Number Of Cycles" Variant="Variant.Outlined" Min="0" HideSpinButtons="true" />
    <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" @onclick="() => hotend.SetHotendPIDValues()">Set PID Values</MudButton>
    </MudCard>
    </MudItem> *@
        @*         <MudItem xs="4">
    <MudCardHeader>
    <MudText Typo="Typo.h6">BED PID Autotune and Store To Printer</MudText>
    </MudCardHeader>
    <MudCard>
    <MudNumericField @bind-Value="bed.PIDBedTemp" Label="Set Temperature" Variant="Variant.Outlined" Min="0" HideSpinButtons="true" />
    <MudNumericField @bind-Value="bed.PIDBedCycles" Label="Number Of Cycles" Variant="Variant.Outlined" Min="0" HideSpinButtons="true" />
    <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" @onclick="() => bed.SetBedPIDValues()">Set PID Values</MudButton>
    </MudCard>
    </MudItem> *@

    </MudGrid>
}
else
{
    <MudAlert Severity="Severity.Error" Variant="Variant.Filled">No printer profile selected</MudAlert>
}

@code {

    private PlotlyChart chart;
    private Config config;
    private Layout layout;
    private IList<ITrace> data;
    string fileMessage = "";
    string sdFiles = "";
    string calibrateMessage = "";

    protected override void OnInitialized()
    {
        background.MessageReceived += OnUpdate;
        background.SecondElapsed += OnTemperatureChange;

        if (background.ConnectionServiceSerial.IsConnected)
        {
            background.ConnectionServiceSerial.Write(CommandMethods.BuildListSDCardCommand());
        }

        config = new Config
            {
                ShowLink = false,
                Responsive = true,
                DisplayLogo = true
            };

        layout = new Layout
            {
                Title = new Title
                {
                    Text = "Bed Mesh"
                },
                PaperBgColor = "white",
                PlotBgColor = "white",
                Font = new Font
                {
                    Color = "black"
                },
                Margin = new Plotly.Blazor.LayoutLib.Margin
                {
                    L = 65,
                    R = 50,
                    B = 65,
                    T = 90
                }
            };
        printer.preheatingProfiles = printer.LoadPrinterDataList<MachineControlHub.Material.PreheatingProfiles>(Data.PrinterDataServiceTest.PREHEATING_PROFILES_PATH);
        printer.SelectedPrinter = printer.LoadPrinterData<MachineControlHub.Printer>(Data.PrinterDataServiceTest.SELECTED_PRINTER_SETTINGS_PATH);
        levelBed.CSVData = printer.LoadPrinterData<string>("meshData.json");

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Run(() =>
            {
                data = new List<ITrace>();
                LoadPlotlyData();
            });
        }
    }


    public void OnUpdate(string message)
    {

        // get the list of files on the SD card
        fileMessage += message;
        if (message.Contains("End"))
        {
            sdFiles = string.Join("\n", fileMessage.Split('\n').Where(line => !string.IsNullOrWhiteSpace(line)));
            print.ListSDFiles(sdFiles);
            fileMessage = "";
        }

        // get the bed leveling data
        if (fileMessage.Contains("Bilinear"))
        {
            calibrateMessage += message;
            if (message.Contains("X:"))
            {
                levelBed.CSVData = "";
                levelBed.CSVData = levelBed.bedData.GetGrid(calibrateMessage);
                levelBed.meshData = levelBed.GetSurfaceData();
                print._processing = false;
                fileMessage = "";
                calibrateMessage = "";

                // delete previous bed leveling data if it exists
                if (File.Exists("meshData.json"))
                {
                    File.Delete("meshData.json");
                }
                // save the new bed leveling data
                printer.SavePrinterData("meshData.json", levelBed.CSVData);
                LoadPlotlyData();
                MyNavigationManager.NavigateTo("/print", true);
            }
        }

        // get other printer status information
        hotend.ParseCurrentHotendTemperature(message);
        bed.ParseCurrentBedTemperature(message);
    }


    // private void OnEstimatedPrintTime()
    // {
    //     print.EstimatedPrintTime();
    //     InvokeAsync(StateHasChanged);
    //     Console.WriteLine(print.estimatedTime);
    // }


    private void OnTemperatureChange()
    {
        if (background.ConnectionServiceSerial.IsConnected)
        {
            Task.Run(async () =>
            {
                if (!print.autoReportTemps)
                {
                    background.ConnectionServiceSerial.Write(CommandMethods.BuildReportTemperaturesCommand());
                }
                if (Data.PrintingService.hotendGraph.Count >= 30)
                {
                    Data.PrintingService.hotendGraph.RemoveAt(0);
                    Data.PrintingService.bedGraph.RemoveAt(0);

                }
                Data.PrintingService.hotendGraph.Add(hotend.currentHotendTemperature);
                Data.PrintingService.bedGraph.Add(bed.currentBedTemperature);
                print.UpdateGraphData();

                await Task.Run(() => GetDrives());
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        print.file = await new StreamReader(e.File.OpenReadStream(Data.PrintingService.MAX_FILE_SIZE)).ReadToEndAsync();
        var fileName = e.File.Name;
        var fileSize = e.File.Size;
        print.uploadedFiles.Add((fileName, print.file, fileSize));
        print.ExtractPrintingSettings(print.file);
        StateHasChanged();
    }


    private void LoadPlotlyData()
    {
        if (levelBed.CSVData != null)
        {
            levelBed.meshData = levelBed.GetSurfaceData();
            Task.Run(async () =>
            {
                foreach (var trace in await levelBed.meshData)
                {
                    await InvokeAsync(async () => await chart.AddTrace(trace));
                    await Task.Delay(100);
                }

                levelBed._isInitialized = true;
            });
        }
    }

    public void Dispose()
    {
        background.MessageReceived -= OnUpdate;
        background.SecondElapsed -= OnTemperatureChange;
    }

    public List<(string DriveName, string VolumeLabel)> PortsAvailable = new List<(string DriveName, string VolumeLabel)>();

    bool isTransferring = false;

    private async Task WriteFileToPort(string driveName, string fileName)
    {
        isTransferring = true;

        string filePath = Path.Combine(driveName, fileName);

        await Task.Run(() => File.WriteAllText(filePath, print.file));

        isTransferring = false;
    }

    // string portName = "";

    string chosenPort = "";
    public void ChoosePort(string portname)
    {
        chosenPort = portname;
    }

    public void GetDrives()
    {
        PortsAvailable.Clear();

        foreach (DriveInfo drive in DriveInfo.GetDrives())
        {
            if (drive.IsReady && drive.DriveType == DriveType.Removable)
            {
                PortsAvailable.Add((drive.Name, drive.VolumeLabel));
            }
        }
    }


    bool mediaAttached = true;
    public void ReleaseMedia()
    {
        background.ConnectionServiceSerial.printerConnection.Write("M22");
        mediaAttached = false;
    }

    public void AttachMedia()
    {
        background.ConnectionServiceSerial.printerConnection.Write("M21");
        mediaAttached = true;
    }
}