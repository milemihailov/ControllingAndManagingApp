@page "/print"
@inject Data.PrintingService print
@inject Data.ConnectionServiceSerial serial

@using MachineControlHub.Motion;
@using MachineControlHub.Print;
<div class="center-div">
<h5 style="color: @(serial.isConnected == "Connected" ? "green" : "red")">@serial.isConnected</h5>

<h1>Print</h1>


<button class="button-30" @onclick="() => {print.StartPrint(fileToPrint);print.StartTimeOfPrint();print.GetFileNameAndSize(fileToPrint);StartClock();}">Start Print</button>
<button class="button-30" @onclick="print.PausePrint">Pause Print</button>
<button class="button-30" @onclick="print.StopPrint">Stop Print</button>

<p>SD files:</p>


<InputFile OnChange="@LoadFiles" multiple accept=".gcode,.gco,.txt"/>

<select @bind=fileToPrint>
    @if (serial.initialized)
    {
        @foreach (var file in files)
        {
            <option value=@file>@file</option>
        }
    }
</select>

<p>File printing: <strong>@print.printName</strong></p>
<p>Estimated print time: @print.estimatedTime</p>
<p>Elapsed print time:  @string.Format("{0}h {1}m {2}s", hours, minutes, seconds)</p>
<p>Start time: <strong>@print.printJob.FormattedStartTime</strong></p>
<p>File Size: <strong>@print.fileSize MB</strong></p>

</div>

@code {
    public string fileToPrint = "";
    public List<string> files;
    public string file;

    private int hours;
    private int minutes;
    private int seconds;
    private System.Timers.Timer timer;

    protected override void OnInitialized()
    {
        if (serial.initialized)
        {
            files = print.ListSDFiles();
        }
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        file = await new StreamReader(e.File.OpenReadStream(Data.PrintingService.MAX_FILE_SIZE)).ReadToEndAsync();
        print.ExtractPrintingSettings(file);
        StateHasChanged();
    }

    private void StartClock()
    {
        hours = 0;
        minutes = 0;
        seconds = 0;

        timer = new System.Timers.Timer(1000);
        timer.Elapsed += (sender, e) => UpdateClock();
        timer.AutoReset = true;
        timer.Enabled = true;
    }

    private void UpdateClock()
    {
        seconds++;
        if (seconds == 60)
        {
            seconds = 0;
            minutes++;
            if (minutes == 2)
            {
                print.EstimatedPrintTime();
            }
            if (minutes == 60)
            {
                minutes = 0;
                hours++;
            }
        }
        InvokeAsync(() => StateHasChanged());
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}