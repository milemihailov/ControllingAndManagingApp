@page "/print"
@inject Data.PrintingService print
@inject Data.ConnectionServiceSerial serial

@using MachineControlHub.Motion;
@using MachineControlHub.Print;
<div class="center-div">
<h5 style="color: @(serial.isConnected == "Connected" ? "green" : "red")">@serial.isConnected</h5>

<h1>Print</h1>


<button class="button-30" @onclick="() => {print.StartPrint(fileToPrint);print.StartTimeOfPrint();print.GetFileNameAndSize(fileToPrint);}">Start Print</button>
<button class="button-30" @onclick="print.PausePrint">Pause Print</button>
<button class="button-30" @onclick="print.StopPrint">Stop Print</button>

<p>SD files:</p>


<InputFile OnChange="@LoadFiles" multiple accept=".gcode,.gco,.txt"/>

<select @bind=fileToPrint>
    @if (serial.initialized)
    {
        @foreach (var file in files)
        {
            <option value=@file>@file</option>
        }
    }
</select>

<p>File printing: <strong>@print.printName</strong></p>
<p>Estimated print time:</p>
<p>Elapsed print time:</p>
<p>Start time: <strong>@print.printJob.FormattedStartTime</strong></p>
<p>File Size: <strong>@print.fileSize MB</strong></p>

</div>

@code {
    public string fileToPrint = "";
    public List<string> files;
    public string file;

    protected override void OnInitialized()
    {
        if (serial.initialized)
        {
            files = print.ListSDFiles();
        }
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        file = await new StreamReader(e.File.OpenReadStream(Data.PrintingService.MAX_FILE_SIZE)).ReadToEndAsync();
        print.ExtractPrintingSettings(file);
        StateHasChanged();
    }
}