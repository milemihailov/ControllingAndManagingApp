@page "/print"
@page "/"
@inject PrintingService PrintManager
@inject PrinterDataService PrinterDataHandler
@inject NavigationManager MyNavigationManager
@inject HotendTemperatureService HotendTemperatureService
@inject BedTemperatureService BedTemperatureService
@inject ChamberTemperatureService ChamberTemperatureService
@inject BackgroundTimer background
@inject PrinterManagerService printerManager
@inject BedLevelingService levelBed
@inject ControlPanelService ControlPanelService

@inject IDialogService DialogService
@inject ISnackbar Snackbar

@implements IDisposable

@using MachineControlHub.Temps
@using System.Globalization
@using Plotly.Blazor.Interop
@using Plotly.Blazor.LayoutLib
@using MachineControlHub.Motion;
@using MachineControlHub.Print;
@using System.Text
@using System.Diagnostics

<Connection />
<PrinterState />
<PromptAndNotificationsHandler />

<MudGrid Style="width:100%;" Class="pr-0 mr-0">



    <MudItem xs="12" sm="12" md="8" lg="6" xl="4" Class="pt-10 pr-0 mr-0 pl-8" Style="width:100%;">

        <!-- MudExpansionPanel for displaying uploaded files -->
        <MudExpansionPanel Text="UPLOADED FILES">
            @foreach (var file in printerManager.ActivePrinter.PrintService.UploadedFiles)
            {
                <MudListItem>
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <!-- Displaying file name -->
                        <MudText Typo="Typo.subtitle2">@file.FileName</MudText>
                        <!-- Displaying file size -->
                        <MudText Typo="Typo.overline">@Math.Round(printerManager.ActivePrinter.CurrentPrintJob.ConvertToMB(@file.FileSize), 2)MB</MudText>
                        <!-- Progress indicator -->
                        <MudProgressCircular Color="Color.Default" Indeterminate=@printerManager.ActivePrinter.IsTransferringFile />
                        <!-- Button to start adding file to media -->
                        <MudButton Disabled="printerManager.ActivePrinter.IsTransferringFile" OnClick="() => PrintManager.WriteFileToDrive(PrintManager.DriveLetter, file.FileName, printerManager.ActivePrinter)">Add to media</MudButton>
                    </div>
                </MudListItem>
            }
        </MudExpansionPanel>
        <!-- Select dropdown for choosing media -->
        @if (PrintManager.DriversAvailable != null)
        {
            <MudSelect Disabled="@(printerManager.ActivePrinter.IsTransferringFile || printerManager.ActivePrinter.MediaAttached)" Label="Select Media" T="string" @bind-Value="PrintManager.DriveLetter" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                @foreach (var port in PrintManager.DriversAvailable)
                {
                    <MudSelectItem Value="@port.DriveName">
                        <div style="display: flex; justify-content: space-between;">
                            <MudText> @port.DriveName @port.VolumeLabel </MudText>
                            @if (PrintManager.DriveLetter == port.DriveName)
                            {
                                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                            }
                        </div>
                    </MudSelectItem>
                }
            </MudSelect>
        }

        @if (printerManager.ActivePrinter.SerialConnection != null && printerManager.ActivePrinter.SerialConnection.IsConnected)
        {
            <MudSelect @bind-Value="@PrintManager.FileToPrint" T="string" Label="Printer Files" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">

                @if (PrintManager.SDFiles != null)
                {
                    @foreach (var file in PrintManager.SDFiles)
                    {
                        <MudSelectItem Value="@file.FileName">
                            <div style="display: flex; justify-content: space-around;">
                                <span>@file.FileName</span>
                                <span>@($"{Math.Round(printerManager.ActivePrinter.CurrentPrintJob.ConvertToMB(double.Parse(file.FileSize)), 2)}MB")</span>
                            </div>
                        </MudSelectItem>
                    }
                }
            </MudSelect>
        }

        <!-- Displaying print details -->
        <div>
            <ContainerSpaceBetween Class="pt-8">
                <MudText>File printing:</MudText>
                <MudText><strong>@printerManager.ActivePrinter.CurrentPrintJob.FileName</strong></MudText>
            </ContainerSpaceBetween>
            <ContainerSpaceBetween>
                <MudText>Estimated print time left:</MudText>
                <MudText>@printerManager.ActivePrinter.CurrentPrintJob.EstimatePrintTime</MudText>
            </ContainerSpaceBetween>
            <ContainerSpaceBetween>
                <MudText>Elapsed print time:</MudText>
                <MudText>
                    @printerManager.ActivePrinter.CurrentPrintJob.Stopwatch.Elapsed.ToString("hh\\:mm\\:ss")
                </MudText>
            </ContainerSpaceBetween>
            <ContainerSpaceBetween>
                <MudText>Start time:</MudText>
                <MudText><strong>@printerManager.ActivePrinter.CurrentPrintJob.FormattedStartTime</strong></MudText>
            </ContainerSpaceBetween>

            <ContainerSpaceBetween>
                <MudText>File Size:</MudText>
                <MudText><strong>@Math.Round(printerManager.ActivePrinter.CurrentPrintJob.ConvertToMB(printerManager.ActivePrinter.CurrentPrintJob.FileSize), 2)MB</strong></MudText>
            </ContainerSpaceBetween>
            @if (printerManager.ActivePrinter.CurrentPrintJob.IsPrinting)
            {
                <ContainerSpaceBetween>
                    <MudProgressLinear Color="Color.Warning" Striped="true" Size="Size.Large" Value="printerManager.ActivePrinter.CurrentPrintJob.PrintProgress" Class="pb-9">
                        <MudText Typo="Typo.subtitle1" Color="Color.Surface">
                            <b> @Math.Round((printerManager.ActivePrinter.CurrentPrintJob.CurrentBytes / 1024.0 / 1024.0), 2) MB / @Math.Round((printerManager.ActivePrinter.CurrentPrintJob.TotalBytes / 1024.0 / 1024.0), 2) MB</b>
                        </MudText>
                    </MudProgressLinear>
                </ContainerSpaceBetween>

                <ContainerSpaceBetween>
                    <MudButton FullWidth="true" OnClick="() => PrintManager.CancelCurrentObject(printerManager.ActivePrinter)" Color="Color.Tertiary">
                        Cancel Current Object
                    </MudButton>
                </ContainerSpaceBetween>
            }
        </div>
    </MudItem>


    <!-- Print Controls ------------------------------------------------->
    <MudItem Style="width:100%;" xs="12" sm="12" md="4" lg="6" xl="2" Class="pl-6 mr-0 pr-0 pt-10 mb-8 mt-4">

        <!-- Conditions to enable\disable buttons -->
        @if (printerManager.ActivePrinter.SerialConnection.IsConnected && !printerManager.ActivePrinter.CurrentPrintJob.IsPrinting)
        {
            PrintManager.StartButtonEnableDisable = false;
            PrintManager.PrintJobControlsEnableDisable = true;
        }
        @if (printerManager.ActivePrinter.CurrentPrintJob.IsPrinting)
        {
            PrintManager.StartButtonEnableDisable = true;
            PrintManager.PrintJobControlsEnableDisable = false;
        }

        <!-- Container for controlling print operations -->
        <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Row="true">
            <!-- Button to start printing -->
            <MudTooltip Text="Start print">
                <MudIconButton Disabled="@PrintManager.StartButtonEnableDisable"
                               Class="mt-2"
                               Variant="Variant.Text"
                               OnClick="@(PrintManager.StartButtonEnableDisable ? null : ConfirmStartAsync)"
                               Size="Size.Medium">
                    <img src="/svg/StartPrint.svg" alt="Custom SVG" style="width:40px; height:30px; opacity:@(PrintManager.StartButtonEnableDisable ? 0.5 : 1); cursor:@(PrintManager.StartButtonEnableDisable ? "not-allowed" : "pointer");" />
                </MudIconButton>
            </MudTooltip>

            <!-- Button to pause printing -->
            <MudTooltip Text="Pause print">
                <MudIconButton Disabled="@PrintManager.PrintJobControlsEnableDisable"
                               Class="mt-2"
                               Variant="Variant.Text"
                               OnClick="() => PrintManager.PausePrint(printerManager.ActivePrinter)"
                               Size="Size.Medium"
                               Title="Pause Print">
                    <img src="/svg/Pause.svg" alt="Custom SVG" style="width:40px; height:30px; opacity:@(PrintManager.PrintJobControlsEnableDisable ? 0.5 : 1); cursor:@(PrintManager.PrintJobControlsEnableDisable ? "not-allowed" : "pointer");" />
                </MudIconButton>
            </MudTooltip>

            <!-- Button to resume printing -->
            <MudTooltip Text="Resume print">
                <MudIconButton Disabled="@PrintManager.PrintJobControlsEnableDisable"
                               Class="mt-2"
                               Variant="Variant.Text"
                               OnClick="() => PrintManager.ResumePrint(printerManager.ActivePrinter)"
                               Size="Size.Medium"
                               Title="Resume Print">
                    <img src="/svg/Resume.svg" alt="Custom SVG" style="width:40px; height:30px; opacity:@(PrintManager.PrintJobControlsEnableDisable ? 0.5 : 1); cursor:@(PrintManager.PrintJobControlsEnableDisable ? "not-allowed" : "pointer");" />
                </MudIconButton>
            </MudTooltip>

            <!-- Button to stop printing -->
            <MudTooltip Text="Stop print">
                <MudIconButton Disabled="@PrintManager.PrintJobControlsEnableDisable"
                               Class="mt-2"
                               Variant="Variant.Text"
                               OnClick="StopPrint"
                               Size="Size.Medium"
                               Title="Stop Print">
                    <img src="/svg/Stop.svg" alt="Custom SVG" style="width:40px; height:30px; opacity:@(PrintManager.PrintJobControlsEnableDisable ? 0.5 : 1); cursor:@(PrintManager.PrintJobControlsEnableDisable ? "not-allowed" : "pointer");" />
                </MudIconButton>
            </MudTooltip>
        </MudStack>


        <!-- Container for media control buttons -->
        <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Row="true" Class="mt-8">

            <!-- Button to release media -->
            <MudTooltip Text="Release Media">
                <MudIconButton Class="mt-2"
                               Variant="Variant.Text"
                               OnClick="() => PrintManager.ReleaseMedia(printerManager.ActivePrinter)"
                               Size="Size.Medium">
                    <img src="/svg/ReleaseMedia.svg" alt="Custom SVG" style="width:40px; height:30px;" />
                </MudIconButton>
            </MudTooltip>

            <!-- Button to attach media -->
            <MudTooltip Text="Attach Media">
                <MudIconButton Disabled="printerManager.ActivePrinter.IsTransferringFile || printerManager.ActivePrinter.MediaAttached"
                               Class="mt-2"
                               Variant="Variant.Text"
                               OnClick="() => {PrintManager.AttachMedia(printerManager.ActivePrinter); RefreshAfterAttachingMedia();}"
                               Size="Size.Medium">
                    <img src="/svg/AttachMedia.svg" alt="Custom SVG" style="width:40px; height:30px;
                        opacity:@(printerManager.ActivePrinter.IsTransferringFile || printerManager.ActivePrinter.MediaAttached ? 0.5 : 1);
                        cursor:@(printerManager.ActivePrinter.IsTransferringFile || printerManager.ActivePrinter.MediaAttached ? "not-allowed" : "pointer");" />
                </MudIconButton>
            </MudTooltip>

            <!-- Button to attach media -->
            <MudTooltip Text="Send gcode to the SD">
                <MudIconButton Disabled="printerManager.ActivePrinter.CurrentPrintJob.IsPrinting"
                               Class="mt-2"
                               Variant="Variant.Text"
                               OnClick="() => SendFileToSD(PrintManager.UploadedFileContent)"
                               Size="Size.Medium">
                    <img src="/svg/TransferToSD.svg" alt="Custom SVG" style="width:40px; height:30px;
                        opacity:@(printerManager.ActivePrinter.CurrentPrintJob.IsPrinting ? 0.5 : 1);
                        cursor:@(printerManager.ActivePrinter.CurrentPrintJob.IsPrinting ? "not-allowed" : "pointer");" />
                </MudIconButton>
            </MudTooltip>

            <!--Upload button-->
            <MudFileUpload T="IBrowserFile" OnFilesChanged="LoadFiles" Accept=".gcode,.gco,.txt">
                <ButtonTemplate>
                    <MudTooltip Text="Upload files">
                        <MudIconButton HtmlTag="label"
                                       Variant="Variant.Text"
                                       Size="Size.Medium"
                                       Title="Release Media"
                                       for="@context.Id">
                            <img src="/svg/Upload.svg" alt="Custom SVG" style="width:40px; height:30px;" />
                        </MudIconButton>
                    </MudTooltip>
                </ButtonTemplate>
            </MudFileUpload>
        </MudStack>

        <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Row="true" Class="mt-8">

            <!-- Button to change filament -->
            <MudTooltip Text="Change filament">
                <MudIconButton Class="mt-2" Variant="Variant.Text" Size="Size.Medium" @onclick="() => HotendTemperatureService.ChangeFilament(printerManager.ActivePrinter)">
                    <!-- Render the custom SVG file from wwwroot/svg/ -->
                    <img src="/svg/ChangeFilament.svg" alt="Custom SVG" style="width:40px; height:30px;" />
                </MudIconButton>
            </MudTooltip>

            <!-- Button to load filament -->
            <MudTooltip Text="Load filament">
                <MudIconButton Class="mt-2" Variant="Variant.Text" Size="Size.Medium" @onclick="() => HotendTemperatureService.LoadFilament(printerManager.ActivePrinter)">
                    <!-- Render the custom SVG file from wwwroot/svg/ -->
                    <img src="/svg/LoadFilament.svg" alt="Custom SVG" style="width:40px; height:30px;" />
                </MudIconButton>
            </MudTooltip>

            <!-- Button to unload filament -->
            <MudTooltip Text="Unload filament">
                <MudIconButton Class="mt-2" Variant="Variant.Text" Size="Size.Medium" @onclick="() => HotendTemperatureService.UnloadFilament(printerManager.ActivePrinter)">
                    <!-- Render the custom SVG file from wwwroot/svg/ -->
                    <img src="/svg/UnloadFilament.svg" alt="Custom SVG" style="width:40px; height:30px;" />
                </MudIconButton>
            </MudTooltip>

            <!-- Button to toggle fan on/off-->
            <MudTooltip Text="Turn fan on/off">
                <MudToggleIconButton @bind-Toggled="@ControlPanelService.ToggleFanValue" Class="mt-2" Size="Size.Medium" @onclick="() => {ControlPanelService.ToggleFan(); ControlPanelService.SetFanSpeed(ControlPanelService.FanSpeedValue, printerManager.ActivePrinter);}">
                    @if (!ControlPanelService.ToggleFanValue)
                    {
                        <!-- Custom SVG for Fan Off -->
                        <img src="/svg/FanOff.svg" alt="Fan On" style="width: 40px; height: 30px;" />
                    }
                    else
                    {
                        <!-- Custom SVG for Fan On -->
                        <img src="/svg/FanOn.svg" alt="Fan Off" style="width: 40px; height: 30px;" />
                    }
                </MudToggleIconButton>
            </MudTooltip>
        </MudStack>
    </MudItem>


    <!-- Temperatures ---------------------------------------------------------------->
    <MudItem xs="12" sm="12" md="12" lg="12" xl="6" Class="pt-10 pr-0 mr-0 pl-8 mt-6" Style="width:100%;">
        <MudGrid>

            <!-- Temperature Graph ----------------------------------------------------------->
            <MudItem xs="12" md="6" lg="6" xl="7" Class="px-4">
                <MudSlider Size="Size.Large" @bind-Value="@ControlPanelService.FanSpeedValue" Min="0" Max="255" @onchange="() => ControlPanelService.SetFanSpeed(ControlPanelService.FanSpeedValue, printerManager.ActivePrinter)">Fan Speed: @ControlPanelService.FanSpeedInPercentage% </MudSlider>
                <MudSlider Size="Size.Large" @bind-Value="@printerManager.ActivePrinter.MotionSettings.PrintSpeed" Min="0" Max="500" @onchange="() => ControlPanelService.SetPrintSpeedPercentage(printerManager.ActivePrinter.MotionSettings.PrintSpeed, printerManager.ActivePrinter)">Print Speed: @printerManager.ActivePrinter.MotionSettings.PrintSpeed% </MudSlider>
                <MudSlider Size="Size.Large" @bind-Value="@printerManager.ActivePrinter.MotionSettings.PrintFlow" Min="0" Max="500" @onchange="() => ControlPanelService.SetPrintFlowPercentage(printerManager.ActivePrinter.MotionSettings.PrintFlow, printerManager.ActivePrinter)">Print Flow: @printerManager.ActivePrinter.MotionSettings.PrintFlow% </MudSlider>
            </MudItem>

            <!-- Container for controlling temperature settings -->
            <MudItem xs="12" sm="12" md="6" lg="6" xl="5" Class="px-4">

                <!-- Grid for displaying hotend temperature settings -->
                <MudGrid Class="pb-6">
                    <MudItem xs="12" sm="12" md="12" lg="12" Style="align-content:space-around;">
                        <!-- Container with text for current hotend temperature -->
                        <MudContainer Style="display: flex; justify-content:space-evenly;" Class="pt-0 mt-0">

                            <MudStack Justify="Justify.FlexStart" Row="true">

                                <MudTooltip Text="Turn hotend off">
                                    <MudIconButton Size="Size.Medium" @onclick="() => HotendTemperatureService.SetHotendTemperature(0, printerManager.ActivePrinter)">
                                        <img src="/svg/HotendOff.svg" style="width: 40px; height: 30px;" />
                                    </MudIconButton>
                                </MudTooltip>

                                <MudTooltip Text="Turn hotend on">
                                    <MudIconButton Size="Size.Medium" @onclick="() => HotendTemperatureService.SetHotendTemperature(HotendTemperatureService.TargetHotendTemp, printerManager.ActivePrinter)">
                                        <img src="/svg/HotendOn.svg" style="width: 40px; height: 30px;" />
                                    </MudIconButton>
                                </MudTooltip>

                            </MudStack>

                            <MudText Style="display:flex; align-items:center;">
                                @if (HotendTemperatureService.CurrentHotendTemp < HotendTemperatureService.TargetHotendTemp)
                                {
                                    <img src="@(IsPrimaryColor ? "/svg/Flame1.svg" : "/svg/Flame2.svg")" alt="Thermometer On" style="width: 30px; height: 25px;" />
                                }
                                @HotendTemperatureService.CurrentHotendTemp

                                <MudNumericField Style="max-width:80px;" Class="pb-2 ml-4" @bind-Value="HotendTemperatureService.TargetHotendTemp" Variant="Variant.Outlined" Min="0" HideSpinButtons="true" />

                            </MudText>
                        </MudContainer>
                    </MudItem>
                </MudGrid>

                <!-- Grid for displaying bed temperature settings -->
                <MudGrid Class="pb-6">
                    <MudItem xs="12" sm="12" md="12" lg="12" Style="align-content:space-around;">
                        <!-- Container with text for current bed temperature -->
                        <MudContainer Style="display: flex; justify-content:space-evenly;" Class="pt-0 mt-0">
                            <MudStack Justify="Justify.FlexStart" Row="true">

                                <MudTooltip Text="Turn bed off">
                                    <MudIconButton Size="Size.Medium" @onclick="() => BedTemperatureService.SetBedTemperature(0, printerManager.ActivePrinter)">
                                        <img src="/svg/BedOff.svg" style="width: 40px; height: 30px;" />
                                    </MudIconButton>
                                </MudTooltip>

                                <MudTooltip Text="Turn bed on">
                                    <MudIconButton Size="Size.Medium" @onclick="() => BedTemperatureService.SetBedTemperature(BedTemperatureService.TargetBedTemp, printerManager.ActivePrinter)">
                                        <img src="/svg/BedOn.svg" style="width: 40px; height: 30px;" />
                                    </MudIconButton>
                                </MudTooltip>
                            </MudStack>

                            <MudText Style="display:flex; align-items:center;">
                                @if (BedTemperatureService.CurrentBedTemp < BedTemperatureService.TargetBedTemp)
                                {
                                    <img src="@(IsPrimaryColor ? "/svg/Flame1.svg" : "/svg/Flame2.svg")" alt="Thermometer On" style="width: 30px; height: 25px;" />
                                }
                                @BedTemperatureService.CurrentBedTemp
                                <MudNumericField Style="max-width:80px;" Class="pb-2 ml-4" @bind-Value="BedTemperatureService.TargetBedTemp" Variant="Variant.Outlined" Min="0" HideSpinButtons="true" />
                            </MudText>
                        </MudContainer>
                    </MudItem>
                </MudGrid>

                <!-- Grid for displaying chamber temperature settings -->
                <MudGrid Class="pb-6">
                    <MudItem xs="12" sm="12" md="12" lg="12" Style="align-content:space-around;">
                        <!-- Container with text for current chamber temperature -->
                        <MudContainer Style="display: flex; justify-content:space-evenly;" Class="pt-0 mt-0">

                            <MudStack Justify="Justify.FlexStart" Row="true">

                                <MudTooltip Text="Turn chamber off">
                                    <MudIconButton Size="Size.Medium" @onclick="() => ChamberTemperatureService.SetChamberTemperature(0, printerManager.ActivePrinter)">
                                        <img src="/svg/ChamberOff.svg" style="width: 40px; height: 30px;" />
                                    </MudIconButton>
                                </MudTooltip>

                                <MudTooltip Text="Turn chamber on">
                                    <MudIconButton Size="Size.Medium" @onclick="() => ChamberTemperatureService.SetChamberTemperature(ChamberTemperatureService.TargetChamberTemp, printerManager.ActivePrinter)">
                                        <img src="/svg/ChamberOn.svg" style="width: 40px; height: 30px;" />
                                    </MudIconButton>
                                </MudTooltip>

                            </MudStack>

                            <MudText Style="display:flex; align-items:center;">
                                @if (ChamberTemperatureService.CurrentChamberTemp < ChamberTemperatureService.TargetChamberTemp)
                                {
                                    <img src="@(IsPrimaryColor ? "/svg/Flame1.svg" : "/svg/Flame2.svg")" alt="Thermometer On" style="width: 30px; height: 25px;" />
                                }
                                @ChamberTemperatureService.CurrentChamberTemp

                                <MudNumericField Style="max-width:80px;" Class="pb-2 ml-4" @bind-Value="@ChamberTemperatureService.TargetChamberTemp" Variant="Variant.Outlined" Min="0" HideSpinButtons="true" />

                            </MudText>
                        </MudContainer>
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudGrid>
    </MudItem>

    <!-- Bed Leveling ---------------------------------------------------------------->
    <BedLevel />


    <!-- Preheating profiles and info graphs ----------------------------------------------------------->
    <MudItem xs="12" md="12" lg="12" xl="6" Class="pa-8 mr-0">
        <MudGrid>
            <MudItem xs="12" sm="12" md="12" lg="12">

                <!-- Preheating Profiles -------------------------------------------------------------->
                <MudCarousel Class="mud-width-full my-8" Style="height:200px;" TData="object" AutoCycle="true" AutoCycleTime="TimeSpan.FromSeconds(5)" EnableSwipeGesture="true" ShowBullets="false">
                    @foreach (var profile in PrinterDataHandler.PreheatingProfiles)
                    {
                        <!-- MudCarouselItem to display a preheating profile -->
                        <MudCarouselItem Transition="MudBlazor.Transition.Slide" Color="@Color.Surface">
                            <!-- Displaying the name of the material -->
                            <MudText Typo="Typo.h4" Style="display: flex; justify-content: center;">@profile.MaterialName</MudText>

                            <!-- Div for displaying the hotend temperature, bed temperature, and fan speed -->
                            <div class="d-flex pt-10 pr-16 pl-16" Style="display: flex; justify-content: space-around; align-items: center;">
                                <!-- Hotend temperature -->
                                <MudText Typo="Typo.overline"><b>Hotend:</b> @(profile.HotendTemp)°C</MudText>
                                <!-- Bed temperature -->
                                <MudText Typo="Typo.overline"><b>Bed</b>: @(profile.BedTemp)°C</MudText>
                                <!-- Fan speed -->
                                <MudText Typo="Typo.overline"><b>Fan Speed:</b> @(profile.FanSpeedInPercent)%</MudText>
                            </div>

                            <!-- Div for preheat and delete buttons -->
                            <div Style="display: flex; justify-content: center;" class="my-7">
                                <!-- Button to start preheating -->
                                <MudTooltip Text="Start preheating">
                                    <MudIconButton Icon="@Icons.Material.Filled.LocalFireDepartment"
                                                   Size="Size.Large"
                                                   Variant="Variant.Text"
                                                   Color="Color.Warning"
                                                   OnClick="() => PrinterDataHandler.StartPreheating(profile, printerManager.ActivePrinter)" />
                                </MudTooltip>
                                <!-- Button to delete preheating profile -->
                                <MudTooltip Text="Delete preset">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                   Size="Size.Large"
                                                   Variant="Variant.Text"
                                                   Color="Color.Error"
                                                   OnClick="() => PrinterDataHandler.DeletePreheatingProfile(profile)" />
                                </MudTooltip>

                                <MudTooltip Text="Make preset">
                                    <a href="printersettings?tab=preheating" style="text-decoration: none;">
                                        <MudIconButton Size="Size.Large"
                                                       Icon="@Icons.Material.Filled.Add"
                                                       Variant="Variant.Text"
                                                       Color="Color.Tertiary" />
                                    </a>
                                </MudTooltip>
                            </div>
                        </MudCarouselItem>
                    }
                </MudCarousel>
            </MudItem>

            <!-- Fan speed, print speed and print flow graphs -->
            <MudItem xs="12" md="12" lg="6">
                <div>
                    <MudChart ChartType="ChartType.StackedBar" ChartSeries="@Series" @bind-SelectedIndex="ControlPanelService.Index" XAxisLabels="@XAxisLabels" Width="100%" Height="350px"></MudChart>
                </div>
            </MudItem>

            <!-- Temperature graph -->
            <MudItem xs="12" md="12" lg="6">

                <div style="display: flex; justify-content: center; align-items: center; height: 100%;">
                    <!-- MudChart component displaying a line chart -->
                    <MudChart ChartType="ChartType.Line"
                              ChartSeries="@PrintManager.Series"
                              @bind-SelectedIndex="PrintManager.Index"
                              XAxisLabels="@PrintManager.XAxisLabels"
                              Width="100%"
                              Height="350px"
                              ChartOptions="PrintManager.Options" />
                </div>
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>
@code {

    public List<ChartSeries> Series { get; set; }
    public string[] XAxisLabels { get; set; } = { "Fan Speed", "Print Speed", "Print Flow" };

    public async void PlayTune(string content)
    {

        await Task.Run(() =>
        {
            using (StringReader reader = new StringReader(content))
            {
                printerManager.ActivePrinter.SerialConnection.Write(content);
            }
        });
    }

    public async void SendFileToSD(string file)
    {
        printerManager.ActivePrinter.IsBusy = true;
        await printerManager.ActivePrinter.PrintService.TransferFileToSD(file, "name.gco");
        printerManager.ActivePrinter.IsBusy = false;
    }

    public void OnRefreshProgressState()
    {
        InvokeAsync(StateHasChanged);
    }

    // Buffer to accumulate file content until processing is triggered
    string FileContentBuffer { get; set; } = "";

    // List of files on the SD card
    string SDFiles { get; set; } = "";

    // Color state for the temperature display
    bool IsPrimaryColor { get; set; } = true;

    /// <summary>
    /// Method that is called when the component is initialized.
    /// Sets up event handlers, initializes configuration, layout, and loads printer data.
    /// </summary>
    protected override void OnInitialized()
    {
        // Subscribe to service events
        background.SecondElapsed += OnSecondElapsed;
        background.FiveSecondsElapsed += OnFiveSecondsElapsed;
        background.HalfSecondElapsed += OnHalfSecondElapsed;
        printerManager.ActivePrinterChanged += OnSelectedPrinter;
        printerManager.InputReceived += OnUpdate;
        printerManager.ActivePrinter.PrintService.RefreshProgressState += OnRefreshProgressState;


        // request print flow value
        PrinterDataHandler.RequestPrintFlow(printerManager.ActivePrinter);

        // request print speed value
        PrinterDataHandler.RequestPrintSpeed(printerManager.ActivePrinter);
        // printerManager.ActivePrinter.SerialConnection.Disconnected += OnDisconnecting;
        // printerManager.ActivePrinter.SerialConnection.Connected += OnConnecting;

        /// Initialize the chart for the fan speed, print speed, and print flow values
        Series = new List<ChartSeries>
        {
            new ChartSeries()
            {
                Data = new double[]
                {
                    ControlPanelService.FanSpeedInPercentage,
                    printerManager.ActivePrinter.MotionSettings.PrintSpeed,
                    printerManager.ActivePrinter.MotionSettings.PrintFlow
                }
            },
        };
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Check if the printer is connected, has printers available and is not printing
            if ((printerManager.ActivePrinter.SerialConnection != null && printerManager.ActivePrinter.SerialConnection.IsConnected) && !printerManager.ActivePrinter.CurrentPrintJob.IsPrinting)
            {
                // Request the list of files on the SD card
                printerManager.ActivePrinter.SerialConnection.Write(CommandMethods.BuildListSDCardCommand());
                printerManager.ActivePrinter.SerialConnection.Write("M304");
                PrinterDataHandler.RequestFirmwareReport(printerManager.ActivePrinter);
            }

            // Load preheating profiles from the specified path
            PrinterDataHandler.PreheatingProfiles = PrinterDataHandler.LoadPrinterDataList<MachineControlHub.Material.PreheatingProfiles>(Data.PrinterDataService.PREHEATING_PROFILES_JSON_PATH);
        }
    }

    /// <summary>
    /// Refreshes the component state when toggling between printers.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    private async void OnSelectedPrinter(object sender, EventArgs e)
    {
        try
        {
            // Clear SDFiles list before switching printers
            if (PrintManager.SDFiles != null)
            {
                PrintManager.SDFiles.Clear();
            }

            // Asks for bed mesh
            printerManager.ActivePrinter.SerialConnection.Write("M420 V");

            await InvokeAsync(() => MyNavigationManager.NavigateTo(MyNavigationManager.Uri, true));
        }
        catch (NavigationException navEx)
        {
            Console.WriteLine($"Navigation error: {navEx.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected error: {ex.Message}");
        }
    }

    private async void RefreshAfterAttachingMedia()
    {
        await InvokeAsync(() => MyNavigationManager.NavigateTo(MyNavigationManager.Uri, true));
    }

    /// <summary>
    /// Handles updates from the printer.
    /// </summary>
    /// <param name="input">The input received from the printer.</param>
    public async void OnUpdate(string input)
    {
        if (!printerManager.ActivePrinter.IsBusy)
        {
            // Check if the printer is connected and has printers
            if (printerManager.ActivePrinter.SerialConnection.IsConnected && printerManager.Printers.Count > 0)
            {
                // Accumulate file content
                FileContentBuffer += input;

                // get the list of files on the SD card
                if (input.Contains("End file"))
                {
                    // remove empty lines from the file content buffer
                    SDFiles = string.Join("\n", FileContentBuffer.Split('\n').Where(line => !string.IsNullOrWhiteSpace(line)));

                    // Add the list of files to the SDFiles list
                    PrintManager.ListSDFiles(SDFiles, printerManager.ActivePrinter);

                    // Clear the file content buffer
                    FileContentBuffer = "";
                }

                // get the name of the file being printed
                PrintManager.GetPrintingFileName(input, printerManager.ActivePrinter);

                // parse the current hotend, bed and chamber temperatures
                await HotendTemperatureService.ParseCurrentHotendTemperature(input, printerManager.ActivePrinter);
                await BedTemperatureService.ParseCurrentBedTemperature(input, printerManager.ActivePrinter);
                if (printerManager.ActivePrinter.HasChamber)
                {
                    await ChamberTemperatureService.ParseCurrentChamberTemperature(input, printerManager.ActivePrinter);
                }

                // Ensure the graph data does not exceed 30 entries by removing the oldest entries
                if (PrintingService.HotendGraph.Count >= 30)
                {
                    PrintingService.HotendGraph.RemoveAt(0);
                    PrintingService.BedGraph.RemoveAt(0);
                }

                // Add the current temperature data to the graph
                PrintingService.HotendGraph.Add(HotendTemperatureService.CurrentHotendTemp);
                PrintingService.BedGraph.Add(BedTemperatureService.CurrentBedTemp);

                // Update the graph data with the latest values
                PrintManager.UpdateGraphData();

                // Parse the firmware settings
                PrinterDataHandler.OnUpdateSettings(input, printerManager.ActivePrinter);


                /// Update the print flow, print speed, and fan speed chart values
                Series = new List<ChartSeries>
    {
        new ChartSeries()
        {
            Name = "Fan Speed",
            Data = new double[]
            {
                ControlPanelService.FanSpeedInPercentage,
                printerManager.ActivePrinter.MotionSettings.PrintSpeed,
                printerManager.ActivePrinter.MotionSettings.PrintFlow
            }
        },
    };

                // update the print flow value
                PrinterDataHandler.GetPrintFlow(input, printerManager.ActivePrinter);

                // update the print speed value
                PrinterDataHandler.GetPrintSpeed(input, printerManager.ActivePrinter);

                ControlPanelService.GetFanSpeed(input);

                await InvokeAsync(StateHasChanged);
            }
        }
    }

    /// <summary>
    /// Called every half a second to make an animation like behaviour for icon
    /// </summary>
    private async void OnHalfSecondElapsed()
    {
        // Toggle the color state
        IsPrimaryColor = !IsPrimaryColor;
        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// This method is called every second to update temperature data, SD status, etc...
    /// </summary>
    private async void OnSecondElapsed()
    {
        if (printerManager.ActivePrinter.SerialConnection != null && printerManager.ActivePrinter.SerialConnection.IsConnected)
        {
            if (!printerManager.ActivePrinter.IsBusy)
            {
                // If automatic temperature reporting is not enabled, request temperature data
                if (!printerManager.ActivePrinter.HasAutoReportTemperature)
                {
                    printerManager.ActivePrinter.SerialConnection.Write(CommandMethods.BuildReportTemperaturesCommand());
                }

                // If automatic status reporting is not enabled, request the SD status
                if (!printerManager.ActivePrinter.HasAutoReportSDStatus)
                {
                    printerManager.ActivePrinter.SerialConnection.Write("M27");
                }

                // Asynchronously get the status of the drives
                await Task.Run(() => PrintManager.GetDrives());

                await InvokeAsync(StateHasChanged);
            }
        }

    }

    /// <summary>
    /// This method is called every five seconds.
    /// </summary>
    private async void OnFiveSecondsElapsed()
    {
        /// Check if the printer is connected and not busy
        if (printerManager.ActivePrinter.SerialConnection != null && printerManager.ActivePrinter.SerialConnection.IsConnected)
        {
            if (!printerManager.ActivePrinter.IsBusy)
            {
                await Task.Run(() =>
                {
                    // If printing is in progress, request name of the file being printed
                    if (printerManager.ActivePrinter.CurrentPrintJob.IsPrinting)
                    {
                        printerManager.ActivePrinter.SerialConnection.Write("M27 C");
                    }
                });
            }
        }
    }

    /// <summary>
    /// Handles the loading of files from an input event.
    /// </summary>
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        // Read the file's content into the print.file variable
        PrintManager.UploadedFileContent = await new StreamReader(e.File.OpenReadStream(Data.PrintingService.MAX_FILE_SIZE)).ReadToEndAsync();

        // Get the file name and size from the event arguments
        var fileName = e.File.Name;
        var fileSize = e.File.Size;

        // Add the file's information to the list of uploaded files
        printerManager.ActivePrinter.PrintService.UploadedFiles.Add((fileName, PrintManager.UploadedFileContent, fileSize));

        StateHasChanged();
    }

    /// <summary>
    /// Asynchronously confirms the start of a print job.
    /// </summary>
    public async Task ConfirmStartAsync()
    {
        // Check if the printer is connected
        if (printerManager.ActivePrinter.SerialConnection.IsConnected)
        {
            // Show a confirmation dialog to the user
            bool? result = await DialogService.ShowMessageBox(
            "Start Print",
            "Do you want to start a print job?",
            yesText: "Start!", cancelText: "Cancel");

            // If the user confirms the start of the print job
            if (result == true)
            {
                // Check if a file is selected for printing
                if (PrintManager.FileToPrint == "")
                {
                    // Show an error message if no file is selected
                    Snackbar.Add("No file selected", Severity.Error);
                }
                else
                {
                    // Start the print job with the selected file
                    PrintManager.StartPrint(PrintManager.FileToPrint, printerManager.ActivePrinter);

                    // Record the start time of the print job
                    PrintManager.StartTimeOfPrint(printerManager.ActivePrinter);

                    // Reset and start the stopwatch for the current print job
                    printerManager.ActivePrinter.CurrentPrintJob.ResetStopwatch();
                    printerManager.ActivePrinter.CurrentPrintJob.StartStopwatch();

                    // Get the file name and size of the file to be printed
                    PrintManager.GetFileNameAndSize(PrintManager.FileToPrint, printerManager.ActivePrinter);

                    // Reset the finalization flag
                    printerManager.ActivePrinter.CurrentPrintJob.FinalizationExecuted = false;

                    // Show a success message indicating the print job has started
                    Snackbar.Add($"<ul><li>Print Started</li> <li> File Printing: {PrintManager.FileToPrint} </li></ul>", Severity.Success);
                }
            }
        }
        else
        {
            // Show a snackbar message indicating the printer is not connected
            Snackbar.Add("Printer is not connected", Severity.Error);
            return;
        }
    }

    /// <summary>
    /// Stops the current print job if the printer is connected and a print job is in progress.
    /// </summary>
    public async Task StopPrint()
    {
        // Check if the printer is connected
        if (printerManager.ActivePrinter.SerialConnection.IsConnected)
        {
            // Show a confirmation dialog to the user
            bool? result = await DialogService.ShowMessageBox(
            "Stop Print",
            "Do you want to stop the print?",
            yesText: "Stop!", cancelText: "Cancel");

            // If the user confirms and a print job is in progress
            if (result == true && printerManager.ActivePrinter.CurrentPrintJob.IsPrinting)
            {
                // Stop the current print job
                printerManager.ActivePrinter.PrintService.AbortCurrentPrint();

                // Stop the stopwatch for the current print job
                printerManager.ActivePrinter.CurrentPrintJob.StopStopwatch();

                // Reset the print progress and format the total print time
                printerManager.ActivePrinter.CurrentPrintJob.PrintProgress = 0;
                PrintManager.FormatTotalPrintTime(printerManager.ActivePrinter);

                // Set the print job status to not printing
                printerManager.ActivePrinter.CurrentPrintJob.IsPrinting = false;

                // Add the print job to the print history
                PrinterDataHandler.AddPrintJobToHistory(printerManager.ActivePrinter);

                // Show a success message indicating the print job has stopped
                Snackbar.Add("Print Stopped", Severity.Error);
            }
            else
            {
                // Show a snackbar message indicating no print job is in progress
                Snackbar.Add("Not Printing", Severity.Error);
                return;
            }
        }
        else
        {
            // Show a snackbar message indicating the printer is not connected
            Snackbar.Add("Printer is not connected", Severity.Error);
            return;
        }
    }

    // public void OnDisconnecting()
    // {
    //     Snackbar.Add("Printer disconnected", Severity.Error);
    // }

    // public void OnConnecting()
    // {
    //     Snackbar.Add("Printer connected", Severity.Success);
    // }

    public void Dispose()
    {
        printerManager.InputReceived -= OnUpdate;
        background.SecondElapsed -= OnSecondElapsed;
        background.FiveSecondsElapsed -= OnFiveSecondsElapsed;
        printerManager.ActivePrinterChanged -= OnSelectedPrinter;
    }
}