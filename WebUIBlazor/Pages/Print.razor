@page "/print"
@page "/"
@inject PrintingService PrintManager
@inject PrinterDataService PrinterDataHandler
@inject NavigationManager MyNavigationManager
@inject HotendTemperatureService HotendTemperatureService
@inject BedTemperatureService BedTemperatureService
@inject ChamberTemperatureService ChamberTemperatureService
@inject BackgroundTimer background
@inject PrinterManagerService printerManager
@inject BedLevelingService levelBed

@inject IDialogService DialogService
@inject ISnackbar Snackbar

@implements IDisposable

@using MachineControlHub.Temps
@using System.Globalization
@using Plotly.Blazor.Interop
@using Plotly.Blazor.LayoutLib
@using MachineControlHub.Motion;
@using MachineControlHub.Print;
@using System.Text
@using System.Diagnostics

<PrinterState />

<MudGrid Style="width:100%;" Class="pr-0 mr-0">

    <!-- Print Controls and Progress ------------------------------------------------->
    <MudItem Style="width:100%;" xs="12" sm="12" md="12" lg="5" Class="pl-6 mr-0 pr-0 pt-10">

        <!-- Container for controlling print operations -->
        <ContainerSpaceBetween>
            <!-- Button to start printing -->
            @if (printerManager.ActivePrinter.SerialConnection != null && printerManager.ActivePrinter.CurrentPrintJob.IsPrinting)
            {
                <MudButton Disabled="true" FullWidth="true" Variant="Variant.Text" Color="Color.Tertiary" @onclick="ConfirmStartAsync">Start</MudButton>
            }
            else
            {
                <MudButton FullWidth="true" Variant="Variant.Text" Color="Color.Tertiary" @onclick="ConfirmStartAsync">Start</MudButton>

            }
            <!-- Button to pause printing -->
            <MudButton FullWidth="true" Variant="Variant.Text" Color="Color.Tertiary" @onclick="PrintManager.PausePrint">Pause</MudButton>
            <!-- Button to resume printing -->
            <MudButton FullWidth="true" Variant="Variant.Text" Color="Color.Tertiary" @onclick="PrintManager.ResumePrint">Resume</MudButton>
            <!-- Button to stop printing -->
            <MudButton FullWidth="true" Variant="Variant.Text" Color="Color.Tertiary" @onclick="() => StopPrint()">Stop</MudButton>
        </ContainerSpaceBetween>

        <MudDivider Class="pt-5" />

        <!-- Grid for file upload and display -->
        <MudGrid Justify="Justify.SpaceAround">
            <MudItem xs="12" md="4" lg="4" Class="pr-0 pl-5">
                <MudFileUpload T="IBrowserFile" OnFilesChanged="LoadFiles" Accept=".gcode,.gco,.txt">
                    <!--Upload button-->
                    <ButtonTemplate>
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload"
                                   for="@context.Id">
                            Upload Files
                        </MudButton>
                    </ButtonTemplate>
                </MudFileUpload>
            </MudItem>

            <!-- MudExpansionPanel for displaying uploaded files -->
            <MudItem xs="12" md="8" lg="8">
                <MudExpansionPanel Text="Uploaded Files">
                    @foreach (var file in PrintManager.UploadedFiles)
                    {
                        <MudListItem>
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <!-- Displaying file name -->
                                <MudText Typo="Typo.subtitle2">@file.FileName</MudText>
                                <!-- Displaying file size -->
                                <MudText Typo="Typo.overline">@Math.Round(printerManager.ActivePrinter.CurrentPrintJob.ConvertToMB(@file.FileSize), 2)MB</MudText>
                                <!-- Progress indicator -->
                                <MudProgressCircular Color="Color.Default" Indeterminate=@PrintManager.IsTransferring />
                                <!-- Button to start adding file to media -->
                                <MudButton OnClick="() => PrintManager.WriteFileToPort(PrintManager.ChosenPort,file.FileName)">Add to media</MudButton>
                            </div>
                        </MudListItem>
                    }
                </MudExpansionPanel>
            </MudItem>
        </MudGrid>

        <!-- Grid for media control buttons -->
        <MudGrid Justify="Justify.SpaceAround">
            <MudItem xs="6" lg="6" Class="px-0">
                <!-- Button to release media -->
                <MudButton FullWidth="true" Variant="Variant.Text" Color="Color.Tertiary" OnClick="PrintManager.ReleaseMedia">Release Media</MudButton>
            </MudItem>
            <MudItem xs="6" lg="6" Class="px-0">
                <!-- Button to attach media -->
                <MudButton FullWidth="true" Variant="Variant.Text" Color="Color.Tertiary" OnClick="PrintManager.AttachMedia">Attach Media</MudButton>
            </MudItem>
        </MudGrid>

        <!-- Select dropdown for choosing media -->
        @if (PrintManager.PortsAvailable != null)
        {
            <MudSelect Label="Select Media" T="string" @bind-Value="PrintManager.ChosenPort" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                @foreach (var port in PrintManager.PortsAvailable)
                {
                    <MudSelectItem Value="@port.DriveName">
                        <div style="display: flex; justify-content: space-between;">
                            <MudText> @port.DriveName @port.VolumeLabel </MudText>
                            @if (PrintManager.ChosenPort == port.DriveName)
                            {
                                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                            }
                        </div>
                    </MudSelectItem>
                }
            </MudSelect>
        }

        @if (printerManager.ActivePrinter.SerialConnection != null && printerManager.ActivePrinter.SerialConnection.IsConnected)
        {
            <MudSelect @bind-Value="@PrintManager.FileToPrint" T="string" Label="SD Files" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">

                @if (PrintManager.SDFiles != null)
                {
                    @foreach (var file in PrintManager.SDFiles)
                    {
                        <MudSelectItem Value="@file.FileName">
                            <div style="display: flex; justify-content: space-around;">
                                <span>@file.FileName</span>
                                <span>@($"{Math.Round(printerManager.ActivePrinter.CurrentPrintJob.ConvertToMB(double.Parse(file.FileSize)), 2)}MB")</span>
                            </div>
                        </MudSelectItem>
                    }
                }
            </MudSelect>
        }


        @if (printerManager.ActivePrinter.SerialConnection != null && printerManager.ActivePrinter.SerialConnection.IsConnected)
        {
            <!-- Displaying print details -->
            <div>
                <ContainerSpaceBetween Class="pt-8">
                    <MudText>File printing:</MudText>
                    <MudText><strong>@printerManager.ActivePrinter.CurrentPrintJob.FileName</strong></MudText>
                </ContainerSpaceBetween>
                <ContainerSpaceBetween>
                    <MudText>Estimated print time left:</MudText>
                    <MudText>@PrintManager.EstimatedTime</MudText>
                </ContainerSpaceBetween>
                <ContainerSpaceBetween>
                    <MudText>Elapsed print time:</MudText>
                    <MudText>
                        @background.stopwatch.Elapsed.ToString("hh\\:mm\\:ss")
                    </MudText>
                </ContainerSpaceBetween>
                <ContainerSpaceBetween>
                    <MudText>Start time:</MudText>
                    <MudText><strong>@printerManager.ActivePrinter.CurrentPrintJob.FormattedStartTime</strong></MudText>
                </ContainerSpaceBetween>

                <ContainerSpaceBetween>
                    <MudText>File Size:</MudText>
                    <MudText><strong>@Math.Round(printerManager.ActivePrinter.CurrentPrintJob.ConvertToMB(printerManager.ActivePrinter.CurrentPrintJob.FileSize), 2)MB</strong></MudText>
                </ContainerSpaceBetween>
                @if (printerManager.ActivePrinter.CurrentPrintJob.IsPrinting)
                {
                    <ContainerSpaceBetween>
                        <MudProgressLinear Color="Color.Warning" Striped="true" Size="Size.Large" Value="PrintManager.Progress" Class="pb-9">
                            <MudText Typo="Typo.subtitle1" Color="Color.Surface">
                                <b> @Math.Round((printerManager.ActivePrinter.CurrentPrintJob.CurrentBytes / 1024.0 / 1024.0), 2) MB / @Math.Round((printerManager.ActivePrinter.CurrentPrintJob.TotalBytes / 1024.0 / 1024.0), 2) MB</b>
                            </MudText>
                        </MudProgressLinear>
                    </ContainerSpaceBetween>
                }
            </div>
        }
    </MudItem>

    <!-- Temperatures ---------------------------------------------------------------->
    <MudItem xs="12" sm="12" md="12" lg="7" Class="pt-10 pr-0 mr-0 pl-8" Style="width:100%;">
        <!-- Container for controlling temperature settings -->
        <MudGrid>
            <MudItem xs="12" sm="12" md="12" lg="12">
                <!-- Grid for displaying hotend temperature settings -->
                <MudGrid Class="pb-6">
                    <MudItem xs="12" sm="12" md="6" Style="align-content:space-around;">
                        <!-- Container with text for current hotend temperature -->
                        <ContainerSpaceBetween Class="pt-0 mt-0">
                            <MudText>Current Hotend Temperature:</MudText>
                            <MudText Style="display:flex; align-items:center;">
                                @if (HotendTemperatureService.currentHotendTemperature < HotendTemperatureService.targetHotendTemperature)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.LocalFireDepartment"
                                             Size="Size.Large"
                                             Color="@(IsPrimaryColor ? Color.Warning : Color.Default)"
                                             Class="pr-2 mr-2" />
                                }
                                @HotendTemperatureService.currentHotendTemperature
                            </MudText>
                        </ContainerSpaceBetween>
                        <!-- Container with text for target hotend temperature -->
                        <ContainerSpaceBetween Class="pt-2 mt-2">
                            <MudText>Target Hotend Temperature:</MudText>
                            <MudText>@HotendTemperatureService.targetHotendTemperature</MudText>
                        </ContainerSpaceBetween>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="6">
                        <MudGrid Style="align-items: center;">
                            <!-- MudNumericField for setting hotend temperature -->
                            <MudItem xs="12" sm="6" md="12">
                                <MudNumericField @bind-Value="HotendTemperatureService.setHotendTemperature" Label="Set Hotend Temperature" Immediate="true" Variant="Variant.Text" Min="0" HideSpinButtons="true" />
                            </MudItem>
                            <MudItem xs="12" sm="6" md="12" Class="my-0 py-0">
                                <ContainerSpaceBetween Class="ma-0 pa-0">
                                    <!-- Button to set hotend temperature -->
                                    <MudButton FullWidth="true" Size="Size.Small" Variant="Variant.Text" Color="Color.Tertiary" @onclick="() => HotendTemperatureService.SetHotendTemperature(HotendTemperatureService.setHotendTemperature)">Set Temperature</MudButton>
                                    <!-- Button to turn off hotend temperature -->
                                    <MudButton FullWidth="true" Size="Size.Small" Variant="Variant.Text" Color="Color.Error" @onclick="() => HotendTemperatureService.SetHotendTemperature(0)">Turn Off</MudButton>
                                </ContainerSpaceBetween>
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                    <MudDivider />
                </MudGrid>
                <!-- Grid for displaying bed temperature settings -->
                <MudGrid Class="pb-6">
                    <MudItem xs="12" sm="12" md="6" Style="align-content:space-around;">
                        <!-- Container with text for current bed temperature -->
                        <ContainerSpaceBetween Class="pt-0 mt-0">
                            <MudText>Current Bed Temperature:</MudText>
                            <MudText Style="display:flex; align-items:center;">
                                @if (BedTemperatureService.currentBedTemperature < BedTemperatureService.targetBedTemperature)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.LocalFireDepartment"
                                             Size="Size.Large"
                                             Color="@(IsPrimaryColor ? Color.Warning : Color.Default)"
                                             Class="pr-2 mr-2" />
                                }
                                @BedTemperatureService.currentBedTemperature
                            </MudText>
                        </ContainerSpaceBetween>
                        <!-- Container with text for target bed temperature -->
                        <ContainerSpaceBetween Class="pt-2 mt-2">
                            <MudText>Target Bed Temperature:</MudText>
                            <MudText>@BedTemperatureService.targetBedTemperature</MudText>
                        </ContainerSpaceBetween>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="6">
                        <MudGrid Style="align-items: center;">
                            <MudItem xs="12" sm="6" md="12">
                                <!-- MudNumericField for setting bed temperature -->
                                <MudNumericField @bind-Value="BedTemperatureService.setBedTemperature" Label="Set Bed Temperature" Variant="Variant.Text" Min="0" HideSpinButtons="true" />
                            </MudItem>
                            <MudItem xs="12" sm="6" md="12" Class="my-0 py-0">
                                <ContainerSpaceBetween Class="ma-0 pa-0">
                                    <!-- Button to set bed temperature -->
                                    <MudButton FullWidth="true" Size="Size.Small" Variant="Variant.Text" Color="Color.Tertiary" @onclick="() => BedTemperatureService.SetBedTemperature(BedTemperatureService.setBedTemperature)">Set Temperature</MudButton>
                                    <!-- Button to turn off bed temperature -->
                                    <MudButton FullWidth="true" Size="Size.Small" Variant="Variant.Text" Color="Color.Error" @onclick="() => BedTemperatureService.SetBedTemperature(0)">Turn Off</MudButton>
                                </ContainerSpaceBetween>
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                    <MudDivider />
                </MudGrid>
                <!-- Grid for displaying chamber temperature settings -->
                <MudGrid Class="pb-6">
                    <MudItem xs="12" sm="12" md="6" Style="align-content:space-around;">
                        <!-- Container with text for current chamber temperature -->
                        <ContainerSpaceBetween Class="pt-0 mt-0">
                            <MudText>Current Chamber Temperature:</MudText>
                            <MudText Style="display:flex; align-items:center;">
                                @if (ChamberTemperatureService.currentChamberTemperature < ChamberTemperatureService.targetChamberTemperature)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.LocalFireDepartment"
                                             Size="Size.Large"
                                             Color="@(IsPrimaryColor ? Color.Warning : Color.Default)"
                                             Class="pr-2 mr-2" />
                                }
                                @ChamberTemperatureService.currentChamberTemperature
                            </MudText>
                        </ContainerSpaceBetween>
                        <!-- Container with text for target chamber temperature -->
                        <ContainerSpaceBetween Class="pt-2 mt-2">
                            <MudText>Target Chamber Temperature:</MudText>
                            <MudText>@ChamberTemperatureService.targetChamberTemperature</MudText>
                        </ContainerSpaceBetween>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="6">
                        <MudGrid Style="align-items: center;">
                            <MudItem xs="12" sm="6" md="12">
                                <!-- MudNumericField for setting chamber temperature -->
                                <MudNumericField @bind-Value="ChamberTemperatureService.setChamberTemperature" Label="Set Chamber Temperature" Variant="Variant.Text" Min="0" HideSpinButtons="true" />
                            </MudItem>
                            <MudItem xs="12" sm="6" md="12" Class="my-0 py-0">
                                <ContainerSpaceBetween Class="ma-0 pa-0">
                                    <!-- Button to set chamber temperature -->
                                    <MudButton FullWidth="true" Size="Size.Small" Variant="Variant.Text" Color="Color.Tertiary" @onclick="() => ChamberTemperatureService.SetChamberTemperature(ChamberTemperatureService.setChamberTemperature)">Set Temperature</MudButton>
                                    <!-- Button to turn off chamber temperature -->
                                    <MudButton FullWidth="true" Size="Size.Small" Variant="Variant.Text" Color="Color.Error" @onclick="() => ChamberTemperatureService.SetChamberTemperature(0)">Turn Off</MudButton>
                                </ContainerSpaceBetween>
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                    <MudDivider />
                </MudGrid>
                <!-- Buttons for filament operations -->
                <MudGrid>
                    <!-- Button to change filament -->
                    <MudItem Class="mr-0 pr-0" xs="12" sm="4" md="4" lg="4">
                        <MudButton FullWidth="true" Variant="Variant.Text" Color="Color.Tertiary" @onclick="() => HotendTemperatureService.ChangeFilament()">Change Filament</MudButton>
                    </MudItem>
                    <!-- Button to load filament -->
                    <MudItem Class="mx-0 px-0" xs="12" sm="4" md="4" lg="4">
                        <MudButton FullWidth="true" Variant="Variant.Text" Color="Color.Tertiary" @onclick="() => HotendTemperatureService.LoadFilament()">Load Filament</MudButton>
                    </MudItem>
                    <!-- Button to unload filament -->
                    <MudItem Class="ml-0 pl-0" xs="12" sm="4" md="4" lg="4">
                        <MudButton FullWidth="true" Variant="Variant.Text" Color="Color.Tertiary" @onclick="() => HotendTemperatureService.UnloadFilament()">Unload Filament</MudButton>
                    </MudItem>
                </MudGrid>

                <!-- Preheating Profiles -------------------------------------------------------------->
                <MudCarousel Class="mud-width-full" Style="height:200px;" TData="object" AutoCycle="true" AutoCycleTime="TimeSpan.FromSeconds(5)" EnableSwipeGesture="true" Elevation="1">
                    @foreach (var profile in PrinterDataHandler.preheatingProfiles)
                    {
                        <!-- MudCarouselItem to display a preheating profile -->
                        <MudCarouselItem Transition="MudBlazor.Transition.Slide" Color="@Color.Surface">
                            <!-- Displaying the name of the material -->
                            <MudText Typo="Typo.h4" Style="display: flex; justify-content: center;">@profile.MaterialName</MudText>

                            <!-- Div for displaying the hotend temperature, bed temperature, and fan speed -->
                            <div class="d-flex pt-4 pr-16 pl-16" Style="display: flex; justify-content: space-around; align-items: center;">
                                <!-- Hotend temperature -->
                                <MudText Typo="Typo.overline"><b>Hotend:</b> @(profile.HotendTemp)°C</MudText>
                                <!-- Bed temperature -->
                                <MudText Typo="Typo.overline"><b>Bed</b>: @(profile.BedTemp)°C</MudText>
                                <!-- Fan speed -->
                                <MudText Typo="Typo.overline"><b>Fan Speed:</b> @(profile.FanSpeed)%</MudText>
                            </div>

                            <!-- Div for preheat and delete buttons -->
                            <div Style="display: flex; justify-content: center;" class="pt-2">
                                <!-- Button to start preheating -->
                                @* <MudButton Class="mr-5 px-5" Variant="Variant.Text" Color="Color.Tertiary" OnClick="() => printer.StartPreheating(profile)">Preheat</MudButton> *@
                                <MudIconButton Icon="@Icons.Material.Filled.LocalFireDepartment"
                                               Size="Size.Medium"
                                               Variant="Variant.Text"
                                               Color="Color.Warning"
                                               OnClick="() => PrinterDataHandler.StartPreheating(profile)" />
                                <!-- Button to delete preheating profile -->
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Text" Color="Color.Error" OnClick="() => PrinterDataHandler.DeletePreheatingProfile(profile)" />
                            </div>
                        </MudCarouselItem>
                    }
                </MudCarousel>
            </MudItem>
        </MudGrid>
    </MudItem>

    <!-- Bed Leveling ---------------------------------------------------------------->
    @if (printerManager.ActivePrinter.HasAutoBedLevel)
    {
        <BedLevel/>
    }

    <!-- Temperature Graph ----------------------------------------------------------->
    <MudItem xs="12" md="6" Class="pa-0 mr-0">
        <!-- Centering div for the MudChart component -->
        <div style="display: flex; justify-content: center; align-items: center; height: 100%;">
            <!-- MudChart component displaying a line chart -->
            <MudChart ChartType="ChartType.Line"
                      ChartSeries="@PrintManager.Series"
                      @bind-SelectedIndex="PrintManager.Index"
                      XAxisLabels="@PrintManager.XAxisLabels"
                      Width="100%"
                      Height="350px"
                      ChartOptions="PrintManager.Options" />
        </div>
    </MudItem>
</MudGrid>

@code {
    string FileMessage { get; set; } = "";
    string SDFiles { get; set; } = "";
    bool IsPrimaryColor { get; set; } = true;

    /// <summary>
    /// Method that is called when the component is initialized.
    /// Sets up event handlers, initializes configuration, layout, and loads printer data.
    /// </summary>
    protected async override Task OnInitializedAsync()
    {
        // Subscribe to the background service events
        background.SecondElapsed += OnSecondElapsed;
        printerManager.ActivePrinterChanged += OnSelectedPrinter;

        await Task.Run(() =>
        {

            if (printerManager.ActivePrinter.SerialConnection != null && printerManager.ActivePrinter.SerialConnection.IsConnected)
            {
                printerManager.ActivePrinter.SerialConnection.Write(CommandMethods.BuildListSDCardCommand());

                printerManager.InputReceived += OnUpdate;
            }

            // Load preheating profiles from the specified path
            PrinterDataHandler.preheatingProfiles = PrinterDataHandler.LoadPrinterDataList<MachineControlHub.Material.PreheatingProfiles>(Data.PrinterDataService.PREHEATING_PROFILES_PATH);
        });
    }

    /// <summary>
    /// Refreshes the component state when toggling between printers.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    private async void OnSelectedPrinter(object sender, EventArgs e)
    {
        try
        {
            if(PrintManager.SDFiles != null)
            {
                PrintManager.SDFiles.Clear();
            }
            await InvokeAsync(() => MyNavigationManager.NavigateTo(MyNavigationManager.Uri, true));
        }
        catch (NavigationException navEx)
        {
            Console.WriteLine($"Navigation error: {navEx.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected error: {ex.Message}");
        }
    }

    /// <summary>
    /// Handles updates from the printer.
    /// </summary>
    /// <param name="message">The message received from the printer.</param>
    public async void OnUpdate(string message)
    {
        if (printerManager.ActivePrinter.SerialConnection.IsConnected && printerManager.Printers.Count > 0)
        {
            // get the list of files on the SD card
            FileMessage += message;
            if (message.Contains("End"))
            {
                SDFiles = string.Join("\n", FileMessage.Split('\n').Where(line => !string.IsNullOrWhiteSpace(line)));
                PrintManager.ListSDFiles(SDFiles);
                FileMessage = "";
            }

            PrintManager.GetPrintingFileName(message);

            // parse the current hotend and bed temperatures
            await HotendTemperatureService.ParseCurrentHotendTemperature(message);
            await BedTemperatureService.ParseCurrentBedTemperature(message);

            // Ensure the graph data does not exceed 30 entries by removing the oldest entries
            if (PrintingService.HotendGraph.Count >= 30)
            {
                PrintingService.HotendGraph.RemoveAt(0);
                PrintingService.BedGraph.RemoveAt(0);
            }

            // Add the current temperature data to the graph
            PrintingService.HotendGraph.Add(HotendTemperatureService.currentHotendTemperature);
            PrintingService.BedGraph.Add(BedTemperatureService.currentBedTemperature);

            // Update the graph data with the latest values
            PrintManager.UpdateGraphData();

            await PromptHandler(message);
            await InvokeAsync(StateHasChanged);
        }
    }

    /// <summary>
    /// This method is called every second to update temperature data and print status.
    /// </summary>
    private void OnSecondElapsed()
    {
        if (printerManager.ActivePrinter.SerialConnection != null && printerManager.ActivePrinter.SerialConnection.IsConnected)
        {
            if (!printerManager.ActivePrinter.IsBusy)
            {
                Task.Run(async () =>
                {
                    // If automatic temperature reporting is not enabled, request temperature data
                    if (!printerManager.ActivePrinter.HasAutoReportTemperature)
                    {
                        printerManager.ActivePrinter.SerialConnection.Write(CommandMethods.BuildReportTemperaturesCommand());
                    }

                    // Asynchronously get the status of the drives
                    await Task.Run(() => PrintManager.GetDrives());

                    // If printing is in progress, request print time elapsed
                    if (printerManager.ActivePrinter.CurrentPrintJob.IsPrinting)
                    {
                        await PrintManager.DisplayEstimatedTimeRemaining();
                        printerManager.ActivePrinter.SerialConnection.Write("M27 C");
                    }

                    await InvokeAsync(StateHasChanged);
                });
            }
        }
        IsPrimaryColor = !IsPrimaryColor; // Toggle the color state

    }

    /// <summary>
    /// Handles the loading of files from an input event.
    /// </summary>
    /// <param name="e">The event arguments containing information about the file input change.</param>
    /// <returns>A task representing the asynchronous file loading operation.</returns>
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        // Read the file's content into the print.file variable
        PrintManager.File = await new StreamReader(e.File.OpenReadStream(Data.PrintingService.MAX_FILE_SIZE)).ReadToEndAsync();

        // Get the file name and size from the event arguments
        var fileName = e.File.Name;
        var fileSize = e.File.Size;

        // Add the file's information to the list of uploaded files
        PrintManager.UploadedFiles.Add((fileName, PrintManager.File, fileSize));

        StateHasChanged();
    }

    public async Task ConfirmStartAsync()
    {
        if (printerManager.ActivePrinter.SerialConnection.IsConnected)
        {
            bool? result = await DialogService.ShowMessageBox(
            "Start Print",
            "Do you want to start a print job?",
            yesText: "Start!", cancelText: "Cancel");

            if (result == true)
            {
                if (PrintManager.FileToPrint == "")
                {
                    Snackbar.Add("No file selected", Severity.Error);
                }
                else
                {
                    PrintManager.StartPrint(PrintManager.FileToPrint);
                    PrintManager.StartTimeOfPrint();
                    PrintManager.Background.ResetStopwatch();
                    PrintManager.Background.StartStopwatch();
                    PrintManager.GetFileNameAndSize(PrintManager.FileToPrint);
                    PrintManager.FinalizationExecuted = false; // Reset the flag
                    Snackbar.Add($"<ul><li>Print Started</li> <li> File Printing: {PrintManager.FileToPrint} </li></ul>", Severity.Success);
                }
            }
        }
        else
        {
            Snackbar.Add("Printer is not connected", Severity.Error);
            return;
        }
    }

    public async Task StopPrint()
    {
        if (printerManager.ActivePrinter.SerialConnection.IsConnected)
        {
            bool? result = await DialogService.ShowMessageBox(
            "Stop Print",
            "Do you want to stop the print?",
            yesText: "Stop!", cancelText: "Cancel");

            if (result == true && printerManager.ActivePrinter.CurrentPrintJob.IsPrinting)
            {
                printerManager.ActivePrinter.PrintService.AbortCurrentPrint();
                PrintManager.Background.StopStopwatch();
                PrintManager.Progress = 0;
                PrintManager.FormatTotalPrintTime();
                printerManager.ActivePrinter.CurrentPrintJob.IsPrinting = false;
                PrintManager.PrinterDataServiceTest.AddPrintJobToHistory(printerManager.ActivePrinter.CurrentPrintJob,printerManager);

                Snackbar.Add("Print Stopped", Severity.Error);
            }
            else
            {
                Snackbar.Add("Not Printing", Severity.Error);
                return;
            }
        }
        else
        {
            Snackbar.Add("Printer is not connected", Severity.Error);
            return;
        }
    }

    public async Task PromptHandler(string message)
    {
        await InvokeAsync(async () =>
        {
            if (message.Contains("Insert filament"))
            {
                bool? result = await DialogService.ShowMessageBox(
                "Filament Change",
                "Insert filament and click continue!",
                yesText: "Continue");

                if (result == true)
                {
                    printerManager.ActivePrinter.SerialConnection.Write("M876 S1");
                    Console.WriteLine("sending");
                }
            }

            if (message.Contains("action:prompt_begin Heater Timeout"))
            {
                bool? result = await DialogService.ShowMessageBox(
                "Filament Change",
                "Heater timeout reheat to continue!",
                yesText: "Reheat");

                if (result == true)
                {
                    printerManager.ActivePrinter.SerialConnection.Write("M876 S1");
                }
            }

            if (message.Contains("action:prompt_begin Reheat Done"))
            {
                bool? result = await DialogService.ShowMessageBox(
                "Filament Change",
                "Reheat done add new filament and click continue!",
                yesText: "Change");

                if (result == true)
                {
                    printerManager.ActivePrinter.SerialConnection.Write("M876 S1");
                }
            }

            if (message.Contains("action:prompt_button PurgeMore"))
            {
                bool? result = await DialogService.ShowMessageBox(
                "Filament Change",
                "Purge more or continue!",
                yesText: "Continue", noText: "Purge More");

                if (result == true)
                {
                    printerManager.ActivePrinter.SerialConnection.Write("M876 S1");
                }
                else
                {
                    printerManager.ActivePrinter.SerialConnection.Write("M876 S0");
                    Snackbar.Add("Purging", Severity.Info);
                }
            }
        });
    }

    public void Dispose()
    {
        printerManager.InputReceived -= OnUpdate;
        background.SecondElapsed -= OnSecondElapsed;
        printerManager.ActivePrinterChanged -= OnSelectedPrinter;
    }
}